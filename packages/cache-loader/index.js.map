{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2019/1/6/006.\n */\n\nimport todayMomentTimestamp, {\n\tbaseSortObject,\n\tcacheSortCallback,\n\tfreezeProperty,\n\tcreateMoment,\n\tnaturalCompare, tryRequireFS, parsePathMainBase,\n} from './lib/util';\nimport { IMdconfMeta } from 'node-novel-info';\nimport { EnumNovelStatus } from 'node-novel-info/lib/const';\nimport path = require('upath2');\n//import fs = require('fs-extra');\nimport { array_unique } from 'array-hyper-unique';\nimport sortObject = require('sort-object-keys2');\n\nconst openedMap = new WeakMap<Partial<INovelStatCacheOptions>, NovelStatCache>();\n\nexport { createMoment }\n\n/**\n * 所有 timestamp 為 Unix timestamp in milliseconds 為 utc +8\n * pathMain 為 主資夾名稱\n * novelID 為 小說資料夾名稱\n */\nexport interface INovelStatCache\n{\n\n\t/**\n\t * 此 json api 的相關資料\n\t */\n\tmeta?: {\n\t\t/**\n\t\t * 此 json 資料更新的當日起始(已含時區)\n\t\t */\n\t\ttodayTimestamp?: number,\n\t\t/**\n\t\t * 此 json 資料更新的實際時間\n\t\t * 只有當使用以下參數時才會更新\n\t\t *\n\t\t * novelStatCache.save(EnumBeforeSave.OPTIMIZE_AND_UPDATE)\n\t\t * novelStatCache.save(2)\n\t\t */\n\t\ttimestamp?: number,\n\n\t\t/**\n\t\t * 打包前的網址\n\t\t * https://gitee.com/bluelovers/novel/tree/master\n\t\t */\n\t\tsourceUrl?: string,\n\t\t/**\n\t\t * 打包後的網址\n\t\t * https://gitlab.com/demonovel/epub-txt/blob/master\n\t\t */\n\t\toutputUrl?: string,\n\t},\n\n\t/**\n\t * 小說緩存狀態\n\t */\n\tnovels: {\n\t\t[pathMain: string]: {\n\t\t\t[novelID: string]: INovelStatCacheNovel,\n\t\t},\n\t},\n\n\t/**\n\t * 歷史紀錄\n\t */\n\thistory: {\n\t\t[timestamp: string]: INovelStatCacheHistory,\n\t\t[timestamp: number]: INovelStatCacheHistory,\n\t},\n\n\t/**\n\t * 透過 node-novel-conf 解析過的 META 資料 (README.md)\n\t */\n\tmdconf: {\n\t\t[pathMain: string]: {\n\t\t\t[novelID: string]: IMdconfMeta,\n\t\t},\n\t},\n}\n\nexport interface INovelStatCacheNovel\n{\n\t/**\n\t * segment 更新時間\n\t */\n\tsegment_date?: number,\n\t/**\n\t * epub 更新時間\n\t */\n\tepub_date?: number,\n\n\t/**\n\t * 初始化時間\n\t */\n\tinit_date?: number,\n\n\t/**\n\t * 總章/卷數量\n\t */\n\tvolume?: number,\n\t/**\n\t * 總話數\n\t */\n\tchapter?: number,\n\n\t/**\n\t * 上次的總章/卷數量\n\t */\n\tvolume_old?: number,\n\t/**\n\t * 上次的總話數\n\t */\n\tchapter_old?: number,\n\n\t/**\n\t * segment 變動數量\n\t */\n\tsegment?: number,\n\t/**\n\t * 上次的 segment 變動數量\n\t */\n\tsegment_old?: number,\n\n\t/**\n\t * 小說狀態 flag 根據 readme.md 內設定\n\t */\n\tnovel_status?: EnumNovelStatus,\n\n\t/**\n\t * 最後變動時間\n\t */\n\tupdate_date?: number;\n\t/**\n\t * 紀錄變動次數\n\t */\n\tupdate_count?: number;\n\n\t/**\n\t * epub filename\n\t */\n\tepub_basename?: string,\n\ttxt_basename?: string,\n}\n\nexport interface INovelStatCacheHistory\n{\n\t/**\n\t * 本次記錄內的 epub 總數\n\t */\n\tepub_count?: number,\n\t/**\n\t * 本次記錄內的 epub\n\t */\n\tepub?: Array<[string, string, INovelStatCacheNovel?]>,\n\tsegment_count?: number,\n\tsegment?: Array<[string, string, INovelStatCacheNovel?]>,\n}\n\nexport interface INovelStatCacheOptions\n{\n\t/**\n\t * 讀寫緩存的目標 json 路徑\n\t */\n\tfile: string,\n\t/**\n\t * 當 file 不存在時嘗試讀取此檔案\n\t */\n\tfile_git?: string,\n\n\t/**\n\t * 禁止將資料寫回檔案\n\t */\n\treadonly?: boolean,\n\n\thistory_max?: number,\n\thistory_keep?: number,\n\n\t/**\n\t * options.readonly && options.data 必須同時啟用\n\t */\n\tdata?: INovelStatCache,\n}\n\n/**\n * 取得小說的最終狀態(預設時)\n * 例如 當 同時存在 xxx 與 xxx_out 時，只會回傳 xxx_out\n */\nexport interface IFilterNovelData\n{\n\t/**\n\t * 實際上的 pathMain\n\t */\n\tpathMain: string,\n\t/**\n\t * 沒有 out 前的 pathMain 路徑\n\t */\n\tpathMain_base: string,\n\tnovelID: string,\n\n\t/**\n\t * 解析 README.md 後的資料\n\t */\n\tmdconf: IMdconfMeta,\n\t/**\n\t * 合併 out 前與 out 後的緩存資料\n\t */\n\tcache: INovelStatCacheNovel,\n\n\t/**\n\t * 此小說是 out 後小說\n\t */\n\tis_out: boolean,\n\t/**\n\t * 是否存在此小說 out 前的資料\n\t * 大部分狀況下此值都是為 true 但少部分情況下會有其他值\n\t *\n\t * 例如\n\t * cm 下的大多都沒有存在 out 後資料 所以會回傳 undefined\n\t * z.abandon 下大多都只存在 out 後資料 所以會回傳 false\n\t */\n\tbase_exists: boolean,\n}\n\n/**\n * 為了統一與枚舉方便 pathMain 會統一為 基礎名(也就是沒有 _out)\n * 實際上的 pathMain 請由 IFilterNovelData 內取得\n */\nexport interface IFilterNovel\n{\n\t[pathMain: string]: {\n\t\t[novelID: string]: IFilterNovelData,\n\t},\n}\n\nconst defaultOptions: Readonly<Partial<INovelStatCacheOptions>> = Object.freeze({\n\n\thistory_max: 14,\n\thistory_keep: 7,\n\n});\n\n/**\n * 透過解析 novel-stat.json 來取得小說狀態\n * 也因此如果 novel-stat.json 內沒有紀錄或者沒有更新的就會判斷不精準\n *\n * @example NovelStatCache.create()\n */\nexport class NovelStatCache\n{\n\t/**\n\t * 讀寫緩存的目標 json 路徑\n\t */\n\tfile: string;\n\t/**\n\t * 當 file 不存在時嘗試讀取此檔案\n\t */\n\tfile_git: string;\n\n\tdata: INovelStatCache = null;\n\toptions: INovelStatCacheOptions;\n\n\tinited: boolean = false;\n\n\t/**\n\t * 使用 NovelStatCache.create() 代替\n\t *\n\t * @deprecated\n\t */\n\tconstructor(options: INovelStatCacheOptions)\n\t{\n\t\toptions = NovelStatCache.fixOptions(options);\n\n\t\tlet _chk: boolean = false;\n\n\t\tif (options.data)\n\t\t{\n\t\t\tif (!(options.data && options.data.history && options.data.novels && options.data.mdconf))\n\t\t\t{\n\t\t\t\tthrow new TypeError(`options.data is not allow data`);\n\t\t\t}\n\n\t\t\t_chk = true;\n\t\t}\n\n\t\tif (!options.file && (!options.readonly || !_chk))\n\t\t{\n\t\t\tthrow new RangeError(`options.file is required`);\n\t\t}\n\t\telse if (!_chk)\n\t\t{\n\t\t\tdelete options.data;\n\t\t}\n\n\t\tthis._init(options);\n\t}\n\n\tprotected _init(options: INovelStatCacheOptions)\n\t{\n\t\tif (options.data)\n\t\t{\n\t\t\tthis.data = options.data;\n\t\t}\n\n\t\tdelete options.data;\n\n\t\tthis.options = options;\n\n\t\tthis.file = this.options.file;\n\t\tthis.file_git = this.options.file_git;\n\n\t\tfreezeProperty(this, 'options', true);\n\t\tfreezeProperty(this, 'file');\n\t\tfreezeProperty(this, 'file_git');\n\n\t\tthis.open();\n\t}\n\n\t/**\n\t * 檢查 file 是否存在\n\t */\n\texists()\n\t{\n\t\tconst fs = tryRequireFS();\n\n\t\treturn this.file && fs && fs.pathExistsSync(this.file)\n\t}\n\n\tprotected open()\n\t{\n\t\tif (!this.inited)\n\t\t{\n\t\t\tthis.inited = true;\n\n\t\t\tconst fs = tryRequireFS();\n\n\t\t\tif (this.data)\n\t\t\t{\n\t\t\t\t//\n\t\t\t}\n\t\t\telse if (fs && this.exists())\n\t\t\t{\n\t\t\t\tthis.data = fs.readJSONSync(this.file);\n\t\t\t}\n\t\t\telse if (fs && this.file_git && fs.pathExistsSync(this.file_git))\n\t\t\t{\n\t\t\t\tthis.data = fs.readJSONSync(this.file_git);\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\tthis.data = this.data || {};\n\n\t\t\tthis.data.history = this.data.history || {};\n\t\t\tthis.data.novels = this.data.novels || {};\n\t\t\tthis.data.mdconf = this.data.mdconf || {};\n\t\t\tthis.data.meta = this.data.meta || {};\n\n\t\t\tfreezeProperty(this, 'inited');\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * 取得所有在 data.novels / data.mdconf 內存在的 pathMain\n\t */\n\tpathMainList()\n\t{\n\t\treturn array_unique(Object.keys(this.data.novels)\n\t\t\t.concat(Object.keys(this.data.mdconf)))\n\t\t\t.sort()\n\t\t\t;\n\t}\n\n\t/**\n\t * 取得所有小說的最終狀態(預設時)\n\t * 例如 當 同時存在 xxx 與 xxx_out 時，只會回傳 xxx_out\n\t */\n\tfilterNovel(type: EnumFilterNovelType = EnumFilterNovelType.DEST)\n\t{\n\t\tlet ks = this.pathMainList();\n\t\tlet self = this;\n\n\t\tif (type & EnumFilterNovelType.SOURCE_ONLY)\n\t\t{\n\t\t\tks = ks.filter(pathMain => !/_out$/.test(pathMain))\n\t\t}\n\t\telse if (type & EnumFilterNovelType.OUTPUT_ONLY)\n\t\t{\n\t\t\tks = ks.filter(pathMain => /_out$/.test(pathMain))\n\t\t}\n\n\t\treturn ks\n\t\t\t.sort(function (a, b)\n\t\t\t{\n\t\t\t\tif (a.replace(/_out$/, '') === b.replace(/_out$/, ''))\n\t\t\t\t{\n\t\t\t\t\tif (/_out$/.test(a))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn naturalCompare(a, b);\n\t\t\t})\n\t\t\t.reduce((ls, pathMain) =>\n\t\t\t{\n\t\t\t\tlet { is_out, pathMain_base }= parsePathMainBase(pathMain);\n\n\t\t\t\tls[pathMain_base] = ls[pathMain_base] || {};\n\n\t\t\t\tObject.entries(self._mdconf_get_main(pathMain))\n\t\t\t\t\t.forEach(function ([novelID, mdconf])\n\t\t\t\t\t{\n\t\t\t\t\t\tlet cache = {\n\t\t\t\t\t\t\t...self.novel(pathMain, novelID),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tlet base_exists: boolean;\n\n\t\t\t\t\t\tif (is_out)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet _src = self.novelExists(pathMain_base, novelID);\n\n\t\t\t\t\t\t\tif (_src)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t([\n\t\t\t\t\t\t\t\t\t'segment',\n\t\t\t\t\t\t\t\t\t'segment_date',\n\t\t\t\t\t\t\t\t\t'segment_old',\n\t\t\t\t\t\t\t\t] as (keyof INovelStatCacheNovel)[])\n\t\t\t\t\t\t\t\t\t.forEach(function (key)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (_src[key] != null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tcache[key] = _src[key]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbase_exists = !!_src;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tls[pathMain_base][novelID] = {\n\t\t\t\t\t\t\tpathMain,\n\t\t\t\t\t\t\tpathMain_base,\n\t\t\t\t\t\t\tnovelID,\n\n\t\t\t\t\t\t\tmdconf,\n\t\t\t\t\t\t\tcache,\n\n\t\t\t\t\t\t\tis_out,\n\t\t\t\t\t\t\tbase_exists,\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t;\n\n\t\t\t\treturn ls;\n\t\t\t}, {} as IFilterNovel)\n\t}\n\n\t/**\n\t * (請小心使用) 移除指定 pathMain & novelID\n\t */\n\tremove(pathMain: string, novelID: string)\n\t{\n\t\tlet bool: boolean;\n\n\t\tif (this.data.novels[pathMain])\n\t\t{\n\t\t\tbool = bool || !!this.data.novels[pathMain][novelID];\n\n\t\t\tdelete this.data.novels[pathMain][novelID]\n\t\t}\n\n\t\tif (this.data.mdconf[pathMain])\n\t\t{\n\t\t\tbool = bool || !!this.data.mdconf[pathMain][novelID];\n\n\t\t\tdelete this.data.mdconf[pathMain][novelID]\n\t\t}\n\n\t\treturn bool;\n\t}\n\n\t/**\n\t * 取得指定 pathMain 的 novel 狀態集合\n\t */\n\tpathMain(pathMain: string)\n\t{\n\t\treturn this.data.novels[pathMain] = this.data.novels[pathMain] || {};\n\t}\n\n\tnovelExists(pathMain: string, novelID: string): INovelStatCacheNovel\n\t{\n\t\tif (this.data.novels[pathMain]\n\t\t\t&& this.data.novels[pathMain][novelID]\n\t\t\t&& Object.keys(this.data.novels[pathMain][novelID]).length\n\t\t\t&& this.data.novels[pathMain][novelID])\n\t\t{\n\t\t\treturn this.data.novels[pathMain][novelID]\n\t\t}\n\t}\n\n\t/**\n\t * 取得指定 pathMain novelID 的 novel 狀態緩存\n\t */\n\tnovel(pathMain: string, novelID: string)\n\t{\n\t\tthis.pathMain(pathMain);\n\n\t\tthis.data.novels[pathMain][novelID] = this.data.novels[pathMain][novelID] || {};\n\n\t\treturn this.data.novels[pathMain][novelID];\n\t}\n\n\tprotected _mdconf_get_main(pathMain: string)\n\t{\n\t\treturn this.data.mdconf[pathMain] || {};\n\t}\n\n\t/**\n\t * 取得指定 pathMain novelID 的 mdconf 資料\n\t */\n\tmdconf_get(pathMain: string, novelID: string): IMdconfMeta\n\t{\n\t\tlet _data = this._mdconf_get_main(pathMain);\n\n\t\treturn _data[novelID];\n\t}\n\n\t/**\n\t * 設定指定 pathMain novelID 的 mdconf 資料\n\t */\n\tmdconf_set(pathMain: string, novelID: string, meta: IMdconfMeta)\n\t{\n\t\tthis.data.mdconf[pathMain] = this.data.mdconf[pathMain] || {};\n\n\t\tthis.data.mdconf[pathMain][novelID] = meta;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\t_beforeSave(bool?: boolean | number)\n\t{\n\t\tlet timestamp = this.timestamp;\n\n\t\tObject.entries(this.data.novels)\n\t\t\t.forEach(([pathMain, data], i) =>\n\t\t\t{\n\t\t\t\tObject.entries(this.data.novels[pathMain])\n\t\t\t\t\t.forEach(([novelID, data]) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet _a = [\n\t\t\t\t\t\t\t\tdata.init_date,\n\t\t\t\t\t\t\t\tdata.epub_date,\n\t\t\t\t\t\t\t\tdata.segment_date,\n\t\t\t\t\t\t\t\tdata.update_date,\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t.filter(v => v && v > 0)\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\tif (!_a.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdata.init_date = timestamp\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdata.init_date = _a\n\t\t\t\t\t\t\t\t.reduce((a, b) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn Math.min(a, b);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t|| timestamp\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t;\n\t\t\t})\n\t\t;\n\n\t\tif (timestamp in this.data.history)\n\t\t{\n\t\t\tlet _list = new Set<INovelStatCacheNovel>();\n\n\t\t\tlet today = this.data.history[timestamp];\n\n\t\t\tif (today.epub)\n\t\t\t{\n\t\t\t\tarray_unique(today.epub, {\n\t\t\t\t\toverwrite: true,\n\t\t\t\t});\n\n\t\t\t\ttoday.epub.sort(function (a, b)\n\t\t\t\t{\n\t\t\t\t\treturn cacheSortCallback(a[0], b[0])\n\t\t\t\t\t\t|| cacheSortCallback(a[1], b[1])\n\t\t\t\t});\n\n\t\t\t\ttoday.epub_count = today.epub.length | 0;\n\n\t\t\t\tif (!today.epub_count)\n\t\t\t\t{\n\t\t\t\t\tdelete today.epub;\n\t\t\t\t\tdelete today.epub_count;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttoday.epub.forEach((v, i) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet novel = this.novel(v[0], v[1]);\n\n\t\t\t\t\t\t_list.add(novel);\n\n\t\t\t\t\t\ttoday.epub[i][2] = novel;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (today.segment)\n\t\t\t{\n\t\t\t\tarray_unique(today.segment, {\n\t\t\t\t\toverwrite: true,\n\t\t\t\t});\n\n\t\t\t\ttoday.segment.sort(function (a, b)\n\t\t\t\t{\n\t\t\t\t\treturn cacheSortCallback(a[0], b[0])\n\t\t\t\t\t\t|| cacheSortCallback(a[1], b[1])\n\t\t\t\t});\n\n\t\t\t\ttoday.segment_count = today.segment.length | 0;\n\n\t\t\t\tif (!today.segment_count)\n\t\t\t\t{\n\t\t\t\t\tdelete today.segment;\n\t\t\t\t\tdelete today.segment_count;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttoday.segment.forEach((v, i) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet novel = this.novel(v[0], v[1]);\n\n\t\t\t\t\t\t_list.add(novel);\n\n\t\t\t\t\t\ttoday.segment[i][2] = novel;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!Object.keys(today).length)\n\t\t\t{\n\t\t\t\tdelete this.data.history[timestamp];\n\t\t\t}\n\t\t\telse if (bool > 1 || bool == EnumBeforeSave.OPTIMIZE_AND_UPDATE)\n\t\t\t{\n\t\t\t\t_list.forEach(function (data)\n\t\t\t\t{\n\t\t\t\t\tlet _a = [\n\t\t\t\t\t\t\tdata.init_date,\n\t\t\t\t\t\t\tdata.epub_date,\n\t\t\t\t\t\t\tdata.segment_date,\n\t\t\t\t\t\t\tdata.update_date,\n\t\t\t\t\t\t]\n\t\t\t\t\t\t.filter(v => v && v > 0)\n\t\t\t\t\t;\n\n\t\t\t\t\tlet old = data.update_date;\n\n\t\t\t\t\tif (!_a.length || true)\n\t\t\t\t\t{\n\t\t\t\t\t\tdata.update_date = timestamp\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdata.update_date = _a\n\t\t\t\t\t\t\t.reduce((a, b) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn Math.max(a, b);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t|| timestamp\n\t\t\t\t\t\t;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (old !== data.update_date)\n\t\t\t\t\t{\n\t\t\t\t\t\tdata.update_count = (data.update_count | 0) + 1;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.data.meta.timestamp = createMoment().valueOf();\n\t\t\t}\n\n\t\t\tthis.data.meta.todayTimestamp = timestamp;\n\t\t}\n\n\t\tlet ks = Object.keys(this.data.history);\n\n\t\tif (ks.length)\n\t\t{\n\t\t\tlet h = this.data.history;\n\n\t\t\tks.forEach(function (k)\n\t\t\t{\n\t\t\t\tif (!Object.keys(h[k]).length)\n\t\t\t\t{\n\t\t\t\t\tdelete h[k];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (ks.length >= this.options.history_max)\n\t\t\t{\n\t\t\t\tks.sort().slice(0, (0 - this.options.history_keep)).forEach(k => delete this.data.history[k])\n\t\t\t}\n\t\t}\n\n\t\tsortObject(this.data, {\n\t\t\tuseSource: true,\n\t\t\tkeys: [\n\t\t\t\t'meta',\n\t\t\t\t'history',\n\t\t\t\t'novels',\n\t\t\t\t'mdconf',\n\t\t\t] as (keyof INovelStatCache)[],\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * 將資料儲存至 file\n\t *\n\t * @param bool - 清理物件多餘資料\n\t */\n\tpublic save(bool?: boolean | number | EnumBeforeSave)\n\t{\n\t\tif (this.options.readonly)\n\t\t{\n\t\t\tthrow new Error(`options.readonly is set, can't not save file`)\n\t\t}\n\n\t\tconst fs = tryRequireFS();\n\n\t\tfs && fs.outputJSONSync(this.file, this.toJSON(bool || true), {\n\t\t\tspaces: 2,\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * 取得今天的 timestamp\n\t */\n\tget timestamp()\n\t{\n\t\treturn todayMomentTimestamp;\n\t}\n\n\t/**\n\t * 取得指定 timestamp 的 history 資料\n\t */\n\thistory(timestamp: number | string)\n\t{\n\t\tif (timestamp in this.data.history)\n\t\t{\n\t\t\treturn this.data.history[timestamp]\n\t\t}\n\t}\n\n\t/**\n\t * 取得所有 history 資料\n\t */\n\thistorys()\n\t{\n\t\treturn Object.entries(this.data.history)\n\t}\n\n\t/**\n\t * 取得前一次的 history 資料\n\t */\n\thistoryPrev()\n\t{\n\t\tlet timestamp = this.timestamp;\n\n\t\tlet ks: string[];\n\n\t\tif (timestamp in this.data.history)\n\t\t{\n\t\t\tks = Object.keys(this.data.history);\n\t\t\tks.pop();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tks = Object.keys(this.data.history);\n\t\t}\n\n\t\tlet k = ks.pop();\n\n\t\tif (k in this.data.history)\n\t\t{\n\t\t\treturn this.data.history[k];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * 取得今天的 history 資料\n\t */\n\thistoryToday()\n\t{\n\t\tlet timestamp = this.timestamp;\n\n\t\tlet data = this.data.history[timestamp] = this.data.history[timestamp] || {};\n\n\t\tdata.epub_count = data.epub_count | 0;\n\t\tdata.epub = data.epub || [];\n\n\t\tdata.segment_count = data.segment_count | 0;\n\t\tdata.segment = data.segment || [];\n\n\t\treturn this.data.history[timestamp];\n\t}\n\n\tstatic fixOptions(options?: INovelStatCacheOptions, extraOptions?: Partial<INovelStatCacheOptions>)\n\t{\n\t\toptions = {\n\t\t\tfile_git: undefined,\n\t\t\tfile: undefined,\n\t\t\t...(defaultOptions as INovelStatCacheOptions),\n\t\t\t...options,\n\t\t\t...extraOptions,\n\t\t};\n\n\t\toptions.history_max = options.history_max > 0 ? options.history_max : defaultOptions.history_max;\n\n\t\toptions.history_keep = options.history_keep > 0 ? options.history_keep : defaultOptions.history_keep;\n\n\t\toptions = baseSortObject(options);\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * 建立 NovelStatCache 物件\n\t */\n\tstatic create(options?: INovelStatCacheOptions)\n\t{\n\t\toptions = this.fixOptions(options);\n\n\t\tif (openedMap.has(options))\n\t\t{\n\t\t\treturn openedMap.get(options);\n\t\t}\n\n\t\tlet obj = new this(options);\n\n\t\topenedMap.set(options, obj);\n\n\t\treturn obj;\n\t}\n\n\t/**\n\t * 允許用其他方式取得 data 來建立物件\n\t */\n\tstatic createFromJSON(data: INovelStatCache | Buffer | object, options?: Partial<INovelStatCacheOptions>)\n\t{\n\t\tif (Buffer.isBuffer(data))\n\t\t{\n\t\t\tdata = JSON.parse(data.toString()) as INovelStatCache;\n\t\t}\n\n\t\toptions = this.fixOptions(options as INovelStatCacheOptions, {\n\t\t\treadonly: (!options || options.readonly == null) ? true : options.readonly,\n\t\t\t// @ts-ignore\n\t\t\tdata,\n\t\t});\n\n\t\treturn this.create(options as INovelStatCacheOptions);\n\t}\n\n\t/**\n\t * @param bool - 清理物件多餘資料\n\t */\n\ttoJSON(bool?: boolean | number | EnumBeforeSave)\n\t{\n\t\tif (bool)\n\t\t{\n\t\t\tthis._beforeSave(bool)\n\t\t}\n\t\treturn this.data;\n\t}\n\n}\n\nexport enum EnumBeforeSave\n{\n\tNONE = 0,\n\tOPTIMIZE = 1,\n\tOPTIMIZE_AND_UPDATE = 2,\n}\n\nexport enum EnumFilterNovelType\n{\n\t/**\n\t * 取得所有小說的最終狀態(預設)\n\t */\n\tDEST = 0x0000,\n\t/**\n\t * 只取得原始資料\n\t */\n\tSOURCE_ONLY = 0x0001,\n\t/**\n\t * 只取得 _out 後資料\n\t */\n\tOUTPUT_ONLY = 0x0002,\n}\n\nNovelStatCache.fixOptions = NovelStatCache.fixOptions.bind(NovelStatCache);\nNovelStatCache.create = NovelStatCache.create.bind(NovelStatCache);\nNovelStatCache.createFromJSON = NovelStatCache.createFromJSON.bind(NovelStatCache);\n\nconst { create, fixOptions, createFromJSON } = NovelStatCache;\nexport { create, fixOptions, createFromJSON }\n\nexport default NovelStatCache.create\nexports = Object.freeze(exports);\n"]}