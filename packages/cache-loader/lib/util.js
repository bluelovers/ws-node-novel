"use strict";
/**
 * Created by user on 2019/1/6/006.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const moment = require("moment");
const sort_1 = require("@node-novel/sort");
const StrUtil = require("str-util");
const sortObject = require("sort-object-keys2");
let defaultOffset = 8;
function createMoment(...argv) {
    return moment(...argv).utcOffset(defaultOffset);
}
exports.createMoment = createMoment;
const todayMoment = createMoment().startOf('day');
exports.todayMomentTimestamp = todayMoment.valueOf();
exports.todayMomentOffset = todayMoment.utcOffset();
exports.default = exports.todayMomentTimestamp;
function getTodayMomentTimestamp() {
    return todayMoment.valueOf();
}
exports.getTodayMomentTimestamp = getTodayMomentTimestamp;
function refreshTodayMoment() {
    let k = createMoment()
        //.add(7, 'days')
        .startOf('day');
    if (k.valueOf() != todayMoment.valueOf()) {
        todayMoment.set(k.toObject());
        return true;
    }
}
exports.refreshTodayMoment = refreshTodayMoment;
Object.defineProperties(exports, {
    todayMomentTimestamp: {
        get: getTodayMomentTimestamp,
    },
    todayMomentOffset: {
        get() {
            return todayMoment.utcOffset();
        },
    },
});
exports.cacheSortCallback = sort_1.createSortCallback({
    dotNum: true,
    transpileBase(input, isSub) {
        let s = StrUtil.toHalfWidth(input);
        return s;
    },
    toLowerCase: sort_1.EnumToLowerCase.toLocaleLowerCase,
});
function freezeProperty(who, prop, freeze) {
    if (freeze) {
        try {
            // @ts-ignore
            who[prop] = Object.freeze(who[prop]);
        }
        catch (e) {
        }
    }
    Object.defineProperty(who, prop, {
        configurable: false,
        writable: false,
    });
    return who;
}
exports.freezeProperty = freezeProperty;
function baseSortObject(data) {
    return sortObject(data, {
        useSource: true,
        keys: Object.keys(data).sort(),
    });
}
exports.baseSortObject = baseSortObject;
exports = Object.freeze(exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILGlDQUFrQztBQUNsQywyQ0FBbUc7QUFDbkcsb0NBQXFDO0FBQ3JDLGdEQUFpRDtBQUVqRCxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFFdEIsU0FBZ0IsWUFBWSxDQUFDLEdBQUcsSUFBSTtJQUVuQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBSEQsb0NBR0M7QUFFRCxNQUFNLFdBQVcsR0FBRyxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFdkMsUUFBQSxvQkFBb0IsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0MsUUFBQSxpQkFBaUIsR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7QUFFdkQsa0JBQWUsNEJBQW9CLENBQUE7QUFFbkMsU0FBZ0IsdUJBQXVCO0lBRXRDLE9BQU8sV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzlCLENBQUM7QUFIRCwwREFHQztBQUVELFNBQWdCLGtCQUFrQjtJQUVqQyxJQUFJLENBQUMsR0FBRyxZQUFZLEVBQUU7UUFDckIsaUJBQWlCO1NBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FDZjtJQUVELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsRUFDeEM7UUFDQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTlCLE9BQU8sSUFBSSxDQUFDO0tBQ1o7QUFDRixDQUFDO0FBYkQsZ0RBYUM7QUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO0lBQ2hDLG9CQUFvQixFQUFFO1FBQ3JCLEdBQUcsRUFBRSx1QkFBdUI7S0FDNUI7SUFDRCxpQkFBaUIsRUFBRTtRQUNsQixHQUFHO1lBRUYsT0FBTyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEMsQ0FBQztLQUNEO0NBQ0QsQ0FBQyxDQUFDO0FBRVUsUUFBQSxpQkFBaUIsR0FBRyx5QkFBa0IsQ0FBQztJQUNuRCxNQUFNLEVBQUUsSUFBSTtJQUNaLGFBQWEsQ0FBQyxLQUFhLEVBQUUsS0FBVztRQUV2QyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxDQUFBO0lBQ1QsQ0FBQztJQUNELFdBQVcsRUFBRSxzQkFBZSxDQUFDLGlCQUFpQjtDQUM5QyxDQUFDLENBQUM7QUFFSCxTQUFnQixjQUFjLENBQUksR0FBTSxFQUFFLElBQWEsRUFBRSxNQUFnQjtJQUV4RSxJQUFJLE1BQU0sRUFDVjtRQUNDLElBQ0E7WUFDQyxhQUFhO1lBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPLENBQUMsRUFDUjtTQUVDO0tBQ0Q7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7UUFDaEMsWUFBWSxFQUFFLEtBQUs7UUFDbkIsUUFBUSxFQUFFLEtBQUs7S0FDZixDQUFDLENBQUM7SUFFSCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFyQkQsd0NBcUJDO0FBRUQsU0FBZ0IsY0FBYyxDQUFJLElBQU87SUFFeEMsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFO1FBQ3ZCLFNBQVMsRUFBRSxJQUFJO1FBQ2YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO0tBQzlCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFORCx3Q0FNQztBQUVELE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS8xLzYvMDA2LlxuICovXG5cbmltcG9ydCBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbmltcG9ydCB7IF90cmltLCBjcmVhdGVTb3J0Q2FsbGJhY2ssIGRlZmF1bHRTb3J0Q2FsbGJhY2ssIEVudW1Ub0xvd2VyQ2FzZSB9IGZyb20gJ0Bub2RlLW5vdmVsL3NvcnQnO1xuaW1wb3J0IFN0clV0aWwgPSByZXF1aXJlKCdzdHItdXRpbCcpO1xuaW1wb3J0IHNvcnRPYmplY3QgPSByZXF1aXJlKCdzb3J0LW9iamVjdC1rZXlzMicpO1xuXG5sZXQgZGVmYXVsdE9mZnNldCA9IDg7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNb21lbnQoLi4uYXJndilcbntcblx0cmV0dXJuIG1vbWVudCguLi5hcmd2KS51dGNPZmZzZXQoZGVmYXVsdE9mZnNldCk7XG59XG5cbmNvbnN0IHRvZGF5TW9tZW50ID0gY3JlYXRlTW9tZW50KCkuc3RhcnRPZignZGF5Jyk7XG5cbmV4cG9ydCBsZXQgdG9kYXlNb21lbnRUaW1lc3RhbXAgPSB0b2RheU1vbWVudC52YWx1ZU9mKCk7XG5leHBvcnQgbGV0IHRvZGF5TW9tZW50T2Zmc2V0ID0gdG9kYXlNb21lbnQudXRjT2Zmc2V0KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvZGF5TW9tZW50VGltZXN0YW1wXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2RheU1vbWVudFRpbWVzdGFtcCgpXG57XG5cdHJldHVybiB0b2RheU1vbWVudC52YWx1ZU9mKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZyZXNoVG9kYXlNb21lbnQoKVxue1xuXHRsZXQgayA9IGNyZWF0ZU1vbWVudCgpXG5cdFx0Ly8uYWRkKDcsICdkYXlzJylcblx0XHQuc3RhcnRPZignZGF5Jylcblx0O1xuXG5cdGlmIChrLnZhbHVlT2YoKSAhPSB0b2RheU1vbWVudC52YWx1ZU9mKCkpXG5cdHtcblx0XHR0b2RheU1vbWVudC5zZXQoay50b09iamVjdCgpKTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGV4cG9ydHMsIHtcblx0dG9kYXlNb21lbnRUaW1lc3RhbXA6IHtcblx0XHRnZXQ6IGdldFRvZGF5TW9tZW50VGltZXN0YW1wLFxuXHR9LFxuXHR0b2RheU1vbWVudE9mZnNldDoge1xuXHRcdGdldCgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRvZGF5TW9tZW50LnV0Y09mZnNldCgpO1xuXHRcdH0sXG5cdH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGNhY2hlU29ydENhbGxiYWNrID0gY3JlYXRlU29ydENhbGxiYWNrKHtcblx0ZG90TnVtOiB0cnVlLFxuXHR0cmFuc3BpbGVCYXNlKGlucHV0OiBzdHJpbmcsIGlzU3ViPzogYW55KVxuXHR7XG5cdFx0bGV0IHMgPSBTdHJVdGlsLnRvSGFsZldpZHRoKGlucHV0KTtcblx0XHRyZXR1cm4gc1xuXHR9LFxuXHR0b0xvd2VyQ2FzZTogRW51bVRvTG93ZXJDYXNlLnRvTG9jYWxlTG93ZXJDYXNlLFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBmcmVlemVQcm9wZXJ0eTxUPih3aG86IFQsIHByb3A6IGtleW9mIFQsIGZyZWV6ZT86IGJvb2xlYW4pXG57XG5cdGlmIChmcmVlemUpXG5cdHtcblx0XHR0cnlcblx0XHR7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHR3aG9bcHJvcF0gPSBPYmplY3QuZnJlZXplKHdob1twcm9wXSk7XG5cdFx0fVxuXHRcdGNhdGNoIChlKVxuXHRcdHtcblxuXHRcdH1cblx0fVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aG8sIHByb3AsIHtcblx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0fSk7XG5cblx0cmV0dXJuIHdobztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJhc2VTb3J0T2JqZWN0PFQ+KGRhdGE6IFQpOiBUXG57XG5cdHJldHVybiBzb3J0T2JqZWN0KGRhdGEsIHtcblx0XHR1c2VTb3VyY2U6IHRydWUsXG5cdFx0a2V5czogT2JqZWN0LmtleXMoZGF0YSkuc29ydCgpLFxuXHR9KTtcbn1cblxuZXhwb3J0cyA9IE9iamVjdC5mcmVlemUoZXhwb3J0cyk7XG4iXX0=