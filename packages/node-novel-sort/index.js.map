{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,yDAA0D;AA2JjD,wCAAc;AAzJvB,IAAY,eAIX;AAJD,WAAY,eAAe;IAE1B,mEAAe,CAAA;IACf,+EAAqB,CAAA;AACtB,CAAC,EAJW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAI1B;AA6CD;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,UAAsC,EAAE;IAE1E,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC;IAEzD,MAAM,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,cAAc,CAAC;IAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,MAAM,CAAC;IAC1C,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;IAC3C,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAE1C,IAAI,OAAO,CAAC,WAAW,EACvB;QACC,IAAI,WAA+C,CAAC;QAEpD,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,UAAU,EAC7C;YACC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;SAClC;aAED;YACC,IAAI,EAAE,GAAG,aAAa,CAAC;YAEvB,IAAI,OAAO,OAAO,CAAC,WAAW,KAAK,QAAQ,EAC3C;gBACC,IAAI,OAAO,CAAC,WAAW,KAAK,eAAe,CAAC,WAAW,EACvD;oBACC,EAAE,GAAG,mBAAmB,CAAC;iBACzB;aACD;YAED,WAAW,GAAG,CAAC,KAAa,EAAE,GAAG,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAC7D;QAED,IAAI,WAAW,EACf;YACC,IAAI,aAAa,EACjB;gBACC,aAAa,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;oBACxB,OAAO,UAAU,KAAK,EAAE,GAAG,IAAI;wBAE9B,OAAO,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,CAAA;oBACjD,CAAC,CAAA;gBACF,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;aAClB;iBAED;gBACC,aAAa,GAAG,WAAW,CAAC;aAC5B;SACD;KACD;IAED,IAAI,cAAc,GAAoB,SAAS,cAAc,CAAC,CAAS,EAAE,CAAS,EAAE,KAAe;QAElG,IAAI,CAAC,KAAK,CAAC,EACX;YACC,OAAO,CAAC,CAAC;SACT;QAED,IAAI,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE;YAC3D,CAAC;YACD,MAAM,EAAE,cAAiC;YACzC,KAAK;SACL,CAAC,CAAC;QAEH,OAAO,CAAC,OAAO,GAAG,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAoB,CAAC;IAErB,IAAI,aAAa,EACjB;QACC,cAAc,GAAG,CAAC,UAAU,KAAK;YAEhC,OAAO,UAAU,CAAS,EAAE,CAAS,EAAE,KAAe;gBAErD,IAAI,CAAC,KAAK,CAAC,EACX;oBACC,OAAO,CAAC,CAAC;iBACT;gBAED,IAAI,KAAK,EACT;oBACC,OAAO,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;iBAC1B;gBAED,OAAO,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACzD,CAAoB,CAAA;QACrB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;KACnB;SAED;QACC,aAAa,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,CAAC;KACzC;IAED,cAAc,CAAC,YAAY,GAAG,YAAY,CAAC;IAC3C,cAAc,CAAC,OAAO,GAAG,OAAO,CAAC;IACjC,cAAc,CAAC,SAAS,GAAG,SAAS,CAAC;IACrC,cAAc,CAAC,aAAa,GAAG,aAAa,CAAC;IAC7C,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC;IAE/C,OAAO,cAAc,CAAC;AACvB,CAAC;AAlGD,gDAkGC;AAID,OAAO,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAChD,MAAM,EAAE,IAAI;CACZ,CAAC,CAAC;AAEH,kBAAe,OAAO,CAAC,mBAAiD,CAAA;AASxE,SAAgB,MAAM,CAAC,CAAS,EAAE,CAAS,EAAE,EAC5C,CAAC,EACD,MAAM,GACQ;IAEd,IAAI,EAAmB,CAAC;IACxB,IAAI,EAAmB,CAAC;IAExB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACxC;QACC,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAE9C,IAAI,CAAC,KAAK,CAAC,EACX;YACC,OAAO,CAAC,CAAC;SACT;QAED,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,EAAE,IAAI,EAAE,EACZ;YACC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEV,OAAO,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAC9E;gBACC,CAAC,EAAE,CAAC;aACJ;YAED,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,OAAO,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;KAC5B;AACF,CAAC;AAnCD,wBAmCC;AAED,SAAgB,KAAK,CAAC,KAAa;IAElC,OAAO,KAAK;SACV,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;SAC7B,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;SACzB,IAAI,EAAE,CACN;AACH,CAAC;AAPD,sBAOC;AAED,aAAa;AACb,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC","sourcesContent":["/**\n * Created by user on 2018/2/12/012.\n */\n\nimport naturalCompare = require('string-natural-compare');\n\nexport enum EnumToLowerCase\n{\n\ttoLowerCase = 1,\n\ttoLocaleLowerCase = 2,\n}\n\nexport declare function defaultSortCallback(a: string, b: string, isSub?: boolean): number;\nexport declare namespace defaultSortCallback\n{\n\texport function failbackSort(a, b): number\n\texport function trigger(a: string, b: string, data: ITriggerData): number\n\texport function transpile(input, isSub?, ...argv): string\n\texport function transpileBase(input, isSub?, ...argv): string\n\n\texport function fnSortCallback(a: string, b: string, isSub?: boolean): number\n}\n\nexport type IFnSortCallback = typeof defaultSortCallback;\n\nexport type ICreateSortCallbackOptions = {\n\tdotNum?: boolean,\n\t/**\n\t * will change base input value\n\t */\n\ttoLowerCase?: EnumToLowerCase | boolean | ((input, isSub?, ...argv) => string),\n} & IFnSortCallbackProp;\n\nexport interface IFnSortCallbackProp\n{\n\t/**\n\t * failback compare\n\t */\n\tfailbackSort?(a, b): number,\n\n\t/**\n\t * compare transpile value\n\t */\n\ttrigger?(a: string, b: string, data: ITriggerData): number,\n\n\t/**\n\t * will change input value for trigger only\n\t */\n\ttranspile?(input, isSub?, ...argv): string,\n\t/**\n\t * will change base input value\n\t */\n\ttranspileBase?(input, isSub?, ...argv): string,\n}\n\n/**\n * create a compare callback by (transpileBase value) -> trigger(transpile value) -> failbackSort\n * @param options\n */\nexport function createSortCallback(options: ICreateSortCallbackOptions = {}): IFnSortCallback\n{\n\tconst r = options.dotNum ? /^(\\d+(?:\\.\\d+)?)/ : /^(\\d+)/;\n\n\tconst failbackSort = options.failbackSort || naturalCompare;\n\tconst trigger = options.trigger || _match;\n\tlet transpile = options.transpile || _trim;\n\tlet transpileBase = options.transpileBase;\n\n\tif (options.toLowerCase)\n\t{\n\t\tlet fnLowerCase: (input: string, ...argv) => string;\n\n\t\tif (typeof options.toLowerCase === 'function')\n\t\t{\n\t\t\tfnLowerCase = options.toLowerCase;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet fn = 'toLowerCase';\n\n\t\t\tif (typeof options.toLowerCase === 'number')\n\t\t\t{\n\t\t\t\tif (options.toLowerCase !== EnumToLowerCase.toLowerCase)\n\t\t\t\t{\n\t\t\t\t\tfn = 'toLocaleLowerCase';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLowerCase = (input: string, ...argv) => input[fn](...argv);\n\t\t}\n\n\t\tif (fnLowerCase)\n\t\t{\n\t\t\tif (transpileBase)\n\t\t\t{\n\t\t\t\ttranspileBase = ((old) => {\n\t\t\t\t\treturn function (input, ...argv)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn fnLowerCase(old(input, ...argv), ...argv)\n\t\t\t\t\t}\n\t\t\t\t})(transpileBase);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttranspileBase = fnLowerCase;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet fnSortCallback: IFnSortCallback = function fnSortCallback(a: string, b: string, isSub?: boolean): number\n\t{\n\t\tif (a === b)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet ret = trigger(transpile(a, isSub), transpile(b, isSub), {\n\t\t\tr,\n\t\t\tmainFn: fnSortCallback as IFnSortCallback,\n\t\t\tisSub,\n\t\t});\n\n\t\treturn (typeof ret == 'number') ? ret : failbackSort(a, b);\n\t} as IFnSortCallback;\n\n\tif (transpileBase)\n\t{\n\t\tfnSortCallback = (function (oldFn)\n\t\t{\n\t\t\treturn function (a: string, b: string, isSub?: boolean): number\n\t\t\t{\n\t\t\t\tif (a === b)\n\t\t\t\t{\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tif (isSub)\n\t\t\t\t{\n\t\t\t\t\treturn oldFn(a, b, isSub);\n\t\t\t\t}\n\n\t\t\t\treturn oldFn(transpileBase(a), transpileBase(b), isSub);\n\t\t\t} as IFnSortCallback\n\t\t})(fnSortCallback);\n\t}\n\telse\n\t{\n\t\ttranspileBase = (input: string) => input;\n\t}\n\n\tfnSortCallback.failbackSort = failbackSort;\n\tfnSortCallback.trigger = trigger;\n\tfnSortCallback.transpile = transpile;\n\tfnSortCallback.transpileBase = transpileBase;\n\tfnSortCallback.fnSortCallback = fnSortCallback;\n\n\treturn fnSortCallback;\n}\n\nexport { naturalCompare }\n\nexports.defaultSortCallback = createSortCallback({\n\tdotNum: true,\n});\n\nexport default exports.defaultSortCallback as typeof defaultSortCallback\n\nexport interface ITriggerData\n{\n\tr: RegExp,\n\tmainFn: IFnSortCallback,\n\tisSub: boolean,\n}\n\nexport function _match(a: string, b: string, {\n\tr,\n\tmainFn,\n}: ITriggerData)\n{\n\tlet ta: RegExpExecArray;\n\tlet tb: RegExpExecArray;\n\n\tif ((ta = r.exec(a)) && (tb = r.exec(b)))\n\t{\n\t\tlet r = parseFloat(ta[0]) - parseFloat(tb[0]);\n\n\t\tif (r !== 0)\n\t\t{\n\t\t\treturn r;\n\t\t}\n\n\t\tlet a1 = ta.input.slice(ta[0].length);\n\t\tlet b1 = tb.input.slice(tb[0].length);\n\n\t\tif (a1 != b1)\n\t\t{\n\t\t\tlet i = 0;\n\n\t\t\twhile (typeof a1[i] != 'undefined' && a1[i] === b1[i] && (!/^\\d$/.test(b1[i])))\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\ta1 = a1.slice(i);\n\t\t\tb1 = b1.slice(i);\n\t\t}\n\n\t\treturn mainFn(a1, b1, true);\n\t}\n}\n\nexport function _trim(input: string): string\n{\n\treturn input\n\t\t.replace(/^[_\\s]+(\\d+)/, '$1')\n\t\t.replace(/^\\D(\\d+)/, '$1')\n\t\t.trim()\n\t\t;\n}\n\n// @ts-ignore\nexports = Object.freeze(exports);\n"]}