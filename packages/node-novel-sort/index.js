"use strict";
/**
 * Created by user on 2018/2/12/012.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const naturalCompare = require("string-natural-compare");
exports.naturalCompare = naturalCompare;
var EnumToLowerCase;
(function (EnumToLowerCase) {
    EnumToLowerCase[EnumToLowerCase["toLowerCase"] = 1] = "toLowerCase";
    EnumToLowerCase[EnumToLowerCase["toLocaleLowerCase"] = 2] = "toLocaleLowerCase";
})(EnumToLowerCase = exports.EnumToLowerCase || (exports.EnumToLowerCase = {}));
function createSortCallback(options = {}) {
    const r = options.dotNum ? /^(\d+(?:\.\d+)?)/ : /^(\d+)/;
    const failbackSort = options.failbackSort || naturalCompare;
    const trigger = options.trigger || _match;
    let transpile = options.transpile || _trim;
    if (options.toLowerCase) {
        if (typeof options.toLowerCase === 'function') {
            const fn = options.toLowerCase;
            transpile = ((old) => {
                return function (input, ...argv) {
                    return fn(old(input, ...argv), ...argv);
                };
            })(transpile);
        }
        else {
            let fn = 'toLowerCase';
            if (typeof options.toLowerCase === 'number') {
                if (options.toLowerCase !== EnumToLowerCase.toLowerCase) {
                    fn = 'toLocaleLowerCase';
                }
            }
            transpile = ((old) => {
                return function (input, ...argv) {
                    return old(input, ...argv)[fn]();
                };
            })(transpile);
        }
    }
    return function defaultSortCallback(a, b, isSub) {
        if (a === b) {
            return 0;
        }
        let ret = trigger(transpile(a, isSub), transpile(b, isSub), {
            r,
            mainFn: defaultSortCallback,
            isSub,
        });
        return (typeof ret == 'number') ? ret : failbackSort(a, b);
    };
}
exports.createSortCallback = createSortCallback;
exports.defaultSortCallback = createSortCallback({
    dotNum: true,
});
exports.default = exports.defaultSortCallback;
function _match(a, b, { r, mainFn, isSub, }) {
    let ta;
    let tb;
    if ((ta = r.exec(a)) && (tb = r.exec(b))) {
        let r = parseInt(ta[0]) - parseInt(tb[0]);
        if (r !== 0) {
            return r;
        }
        let a1 = ta.input.slice(ta[0].length);
        let b1 = tb.input.slice(tb[0].length);
        if (a1 != b1) {
            let i = 0;
            while (typeof a1[i] != 'undefined' && a1[i] == b1[i] && (!/^\d$/.test(b1[0]))) {
                i++;
            }
            a1 = a1.slice(i);
            b1 = b1.slice(i);
        }
        return mainFn(a1, b1, true);
    }
}
exports._match = _match;
function _trim(input) {
    return input
        .replace(/^[_\s]+(\d+)/, '$1')
        .replace(/^\D(\d+)/, '$1')
        .trim();
}
exports._trim = _trim;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgseURBQXlEO0FBeUVoRCx3Q0FBYztBQXZFdkIsSUFBWSxlQUlYO0FBSkQsV0FBWSxlQUFlO0lBRTFCLG1FQUFlLENBQUE7SUFDZiwrRUFBcUIsQ0FBQTtBQUN0QixDQUFDLEVBSlcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUFJMUI7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxVQU0vQixFQUFFO0lBRUwsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUV6RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxJQUFJLGNBQWMsQ0FBQztJQUM1RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQztJQUMxQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEtBQUssQ0FBQztJQUUzQyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQ3ZCO1FBQ0MsSUFBSSxPQUFPLE9BQU8sQ0FBQyxXQUFXLEtBQUssVUFBVSxFQUM3QztZQUNDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFFL0IsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxVQUFVLEtBQUssRUFBRSxHQUFHLElBQUk7b0JBRTlCLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO2dCQUN4QyxDQUFDLENBQUE7WUFDRixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNkO2FBRUQ7WUFDQyxJQUFJLEVBQUUsR0FBRyxhQUFhLENBQUM7WUFFdkIsSUFBSSxPQUFP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QUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUI7QUFDRixDQUFDO0FBcENELHdCQW9DQztBQUVELFNBQWdCLEtBQUssQ0FBQyxLQUFhO0lBRWxDLE9BQU8sS0FBSztTQUNWLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDO1NBQzdCLE9BQU8sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO1NBQ3pCLElBQUksRUFBRSxDQUNOO0FBQ0gsQ0FBQztBQVBELHNCQU9DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8yLzEyLzAxMi5cbiAqL1xuXG5pbXBvcnQgKiBhcyBuYXR1cmFsQ29tcGFyZSBmcm9tICdzdHJpbmctbmF0dXJhbC1jb21wYXJlJztcblxuZXhwb3J0IGVudW0gRW51bVRvTG93ZXJDYXNlXG57XG5cdHRvTG93ZXJDYXNlID0gMSxcblx0dG9Mb2NhbGVMb3dlckNhc2UgPSAyLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU29ydENhbGxiYWNrKG9wdGlvbnM6IHtcblx0ZG90TnVtPzogYm9vbGVhbixcblx0ZmFpbGJhY2tTb3J0PyhhLCBiKTogbnVtYmVyLFxuXHR0cmlnZ2VyPyhhLCBiKTogbnVtYmVyLFxuXHR0cmFuc3BpbGU/KGlucHV0LCBpc1N1Yj8sIC4uLmFyZ3YpOiBzdHJpbmcsXG5cdHRvTG93ZXJDYXNlPzogRW51bVRvTG93ZXJDYXNlIHwgYm9vbGVhbiB8ICgoaW5wdXQsIGlzU3ViPywgLi4uYXJndikgPT4gc3RyaW5nKSxcbn0gPSB7fSlcbntcblx0Y29uc3QgciA9IG9wdGlvbnMuZG90TnVtID8gL14oXFxkKyg/OlxcLlxcZCspPykvIDogL14oXFxkKykvO1xuXG5cdGNvbnN0IGZhaWxiYWNrU29ydCA9IG9wdGlvbnMuZmFpbGJhY2tTb3J0IHx8IG5hdHVyYWxDb21wYXJlO1xuXHRjb25zdCB0cmlnZ2VyID0gb3B0aW9ucy50cmlnZ2VyIHx8IF9tYXRjaDtcblx0bGV0IHRyYW5zcGlsZSA9IG9wdGlvbnMudHJhbnNwaWxlIHx8IF90cmltO1xuXG5cdGlmIChvcHRpb25zLnRvTG93ZXJDYXNlKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLnRvTG93ZXJDYXNlID09PSAnZnVuY3Rpb24nKVxuXHRcdHtcblx0XHRcdGNvbnN0IGZuID0gb3B0aW9ucy50b0xvd2VyQ2FzZTtcblxuXHRcdFx0dHJhbnNwaWxlID0gKChvbGQpID0+IHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgLi4uYXJndilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiBmbihvbGQoaW5wdXQsIC4uLmFyZ3YpLCAuLi5hcmd2KVxuXHRcdFx0XHR9XG5cdFx0XHR9KSh0cmFuc3BpbGUpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0bGV0IGZuID0gJ3RvTG93ZXJDYXNlJztcblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLnRvTG93ZXJDYXNlID09PSAnbnVtYmVyJylcblx0XHRcdHtcblx0XHRcdFx0aWYgKG9wdGlvbnMudG9Mb3dlckNhc2UgIT09IEVudW1Ub0xvd2VyQ2FzZS50b0xvd2VyQ2FzZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZuID0gJ3RvTG9jYWxlTG93ZXJDYXNlJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0cmFuc3BpbGUgPSAoKG9sZCkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGlucHV0LCAuLi5hcmd2KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIG9sZChpbnB1dCwgLi4uYXJndilbZm5dKClcblx0XHRcdFx0fVxuXHRcdFx0fSkodHJhbnNwaWxlKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnVuY3Rpb24gZGVmYXVsdFNvcnRDYWxsYmFjayhhOiBzdHJpbmcsIGI6IHN0cmluZywgaXNTdWI/OiBib29sZWFuKVxuXHR7XG5cdFx0aWYgKGEgPT09IGIpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0bGV0IHJldCA9IHRyaWdnZXIodHJhbnNwaWxlKGEsIGlzU3ViKSwgdHJhbnNwaWxlKGIsIGlzU3ViKSwge1xuXHRcdFx0cixcblx0XHRcdG1haW5GbjogZGVmYXVsdFNvcnRDYWxsYmFjayxcblx0XHRcdGlzU3ViLFxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuICh0eXBlb2YgcmV0ID09ICdudW1iZXInKSA/IHJldCA6IGZhaWxiYWNrU29ydChhLCBiKTtcblx0fVxufVxuXG5leHBvcnQgeyBuYXR1cmFsQ29tcGFyZSB9XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U29ydENhbGxiYWNrID0gY3JlYXRlU29ydENhbGxiYWNrKHtcblx0ZG90TnVtOiB0cnVlLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRTb3J0Q2FsbGJhY2tcblxuZXhwb3J0IGZ1bmN0aW9uIF9tYXRjaChhOiBzdHJpbmcsIGI6IHN0cmluZywge1xuXHRyLFxuXHRtYWluRm4sXG5cdGlzU3ViLFxufSlcbntcblx0bGV0IHRhOiBSZWdFeHBFeGVjQXJyYXk7XG5cdGxldCB0YjogUmVnRXhwRXhlY0FycmF5O1xuXG5cdGlmICgodGEgPSByLmV4ZWMoYSkpICYmICh0YiA9IHIuZXhlYyhiKSkpXG5cdHtcblx0XHRsZXQgciA9IHBhcnNlSW50KHRhWzBdKSAtIHBhcnNlSW50KHRiWzBdKTtcblxuXHRcdGlmIChyICE9PSAwKVxuXHRcdHtcblx0XHRcdHJldHVybiByO1xuXHRcdH1cblxuXHRcdGxldCBhMSA9IHRhLmlucHV0LnNsaWNlKHRhWzBdLmxlbmd0aCk7XG5cdFx0bGV0IGIxID0gdGIuaW5wdXQuc2xpY2UodGJbMF0ubGVuZ3RoKTtcblxuXHRcdGlmIChhMSAhPSBiMSlcblx0XHR7XG5cdFx0XHRsZXQgaSA9IDA7XG5cblx0XHRcdHdoaWxlICh0eXBlb2YgYTFbaV0gIT0gJ3VuZGVmaW5lZCcgJiYgYTFbaV0gPT0gYjFbaV0gJiYgKCEvXlxcZCQvLnRlc3QoYjFbMF0pKSlcblx0XHRcdHtcblx0XHRcdFx0aSsrO1xuXHRcdFx0fVxuXG5cdFx0XHRhMSA9IGExLnNsaWNlKGkpO1xuXHRcdFx0YjEgPSBiMS5zbGljZShpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFpbkZuKGExLCBiMSwgdHJ1ZSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF90cmltKGlucHV0OiBzdHJpbmcpOiBzdHJpbmdcbntcblx0cmV0dXJuIGlucHV0XG5cdFx0LnJlcGxhY2UoL15bX1xcc10rKFxcZCspLywgJyQxJylcblx0XHQucmVwbGFjZSgvXlxcRChcXGQrKS8sICckMScpXG5cdFx0LnRyaW0oKVxuXHRcdDtcbn1cbiJdfQ==