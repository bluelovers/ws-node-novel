"use strict";
/**
 * Created by user on 2018/2/12/012.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const naturalCompare = require("string-natural-compare");
exports.naturalCompare = naturalCompare;
function createSortCallback(options = {}) {
    const r = options.dotNum ? /^(\d+(?:\.\d+)?)/ : /^(\d+)/;
    const failbackSort = options.failbackSort || naturalCompare;
    const trigger = options.trigger || _match;
    const transpile = options.transpile || _trim;
    return function defaultSortCallback(a, b, isSub) {
        if (a === b) {
            return 0;
        }
        let ret = trigger(transpile(a, isSub), transpile(b, isSub), {
            r,
            mainFn: defaultSortCallback,
            isSub,
        });
        return (typeof ret == 'number') ? ret : failbackSort(a, b);
    };
}
exports.createSortCallback = createSortCallback;
exports.defaultSortCallback = createSortCallback({
    dotNum: true,
});
exports.default = exports.defaultSortCallback;
function _match(a, b, { r, mainFn, isSub, }) {
    let ta;
    let tb;
    if ((ta = r.exec(a)) && (tb = r.exec(b))) {
        let r = parseInt(ta[0]) - parseInt(tb[0]);
        if (r !== 0) {
            return r;
        }
        let a1 = ta.input.slice(ta[0].length);
        let b1 = tb.input.slice(tb[0].length);
        if (a1 != b1) {
            let i = 0;
            while (typeof a1[i] != 'undefined' && a1[i] == b1[i] && (!/^\d$/.test(b1[0]))) {
                i++;
            }
            a1 = a1.slice(i);
            b1 = b1.slice(i);
        }
        return mainFn(a1, b1, true);
    }
}
exports._match = _match;
function _trim(input) {
    return input
        .replace(/^[_\s]+(\d+)/, '$1')
        .replace(/^\D(\d+)/, '$1')
        .trim();
}
exports._trim = _trim;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgseURBQXlEO0FBZ0NoRCx3Q0FBYztBQTlCdkIsU0FBZ0Isa0JBQWtCLENBQUMsVUFLL0IsRUFBRTtJQUVMLE1BQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFFekQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksSUFBSSxjQUFjLENBQUM7SUFDNUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUM7SUFDMUMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUM7SUFFN0MsT0FBTyxTQUFTLG1CQUFtQixDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsS0FBZTtRQUV4RSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQ1g7WUFDQyxPQUFPLENBQUMsQ0FBQztTQUNUO1FBRUQsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUMzRCxDQUFDO1lBQ0QsTUFBTSxFQUFFLG1CQUFtQjtZQUMzQixLQUFLO1NBQ0wsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFBO0FBQ0YsQ0FBQztBQTVCRCxnREE0QkM7QUFJWSxRQUFBLG1CQUFtQixHQUFHLGtCQUFrQixDQUFDO0lBQ3JELE1BQU0sRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBRUgsa0JBQWUsMkJBQW1CLENBQUE7QUFFbEMsU0FBZ0IsTUFBTSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFDNUMsQ0FBQyxFQUNELE1BQU0sRUFDTixLQUFLLEdBQ0w7SUFFQSxJQUFJLEVBQW1CLENBQUM7SUFDeEIsSUFBSSxFQUFtQixDQUFDO0lBRXhCLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDeEM7UUFDQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFDWDtZQUNDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Q7UUFFRCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXRDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFDWjtZQUNDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVWLE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0U7Z0JBQ0MsQ0FBQyxFQUFFLENBQUM7YUFDSjtZQUVELEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QjtBQUNGLENBQUM7QUFwQ0Qsd0JBb0NDO0FBRUQsU0FBZ0IsS0FBSyxDQUFDLEtBQWE7SUFFbEMsT0FBTyxLQUFLO1NBQ1YsT0FBTyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7U0FDN0IsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7U0FDekIsSUFBSSxFQUFFLENBQ047QUFDSCxDQUFDO0FBUEQsc0JBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzIvMTIvMDEyLlxuICovXG5cbmltcG9ydCAqIGFzIG5hdHVyYWxDb21wYXJlIGZyb20gJ3N0cmluZy1uYXR1cmFsLWNvbXBhcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU29ydENhbGxiYWNrKG9wdGlvbnM6IHtcblx0ZG90TnVtPzogYm9vbGVhbixcblx0ZmFpbGJhY2tTb3J0PyhhLCBiKTogbnVtYmVyLFxuXHR0cmlnZ2VyPyhhLCBiKTogbnVtYmVyLFxuXHR0cmFuc3BpbGU/KGlucHV0LCBpc1N1Yj8pOiBzdHJpbmcsXG59ID0ge30pXG57XG5cdGNvbnN0IHIgPSBvcHRpb25zLmRvdE51bSA/IC9eKFxcZCsoPzpcXC5cXGQrKT8pLyA6IC9eKFxcZCspLztcblxuXHRjb25zdCBmYWlsYmFja1NvcnQgPSBvcHRpb25zLmZhaWxiYWNrU29ydCB8fCBuYXR1cmFsQ29tcGFyZTtcblx0Y29uc3QgdHJpZ2dlciA9IG9wdGlvbnMudHJpZ2dlciB8fCBfbWF0Y2g7XG5cdGNvbnN0IHRyYW5zcGlsZSA9IG9wdGlvbnMudHJhbnNwaWxlIHx8IF90cmltO1xuXG5cdHJldHVybiBmdW5jdGlvbiBkZWZhdWx0U29ydENhbGxiYWNrKGE6IHN0cmluZywgYjogc3RyaW5nLCBpc1N1Yj86IGJvb2xlYW4pXG5cdHtcblx0XHRpZiAoYSA9PT0gYilcblx0XHR7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRsZXQgcmV0ID0gdHJpZ2dlcih0cmFuc3BpbGUoYSwgaXNTdWIpLCB0cmFuc3BpbGUoYiwgaXNTdWIpLCB7XG5cdFx0XHRyLFxuXHRcdFx0bWFpbkZuOiBkZWZhdWx0U29ydENhbGxiYWNrLFxuXHRcdFx0aXNTdWIsXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gKHR5cGVvZiByZXQgPT0gJ251bWJlcicpID8gcmV0IDogZmFpbGJhY2tTb3J0KGEsIGIpO1xuXHR9XG59XG5cbmV4cG9ydCB7IG5hdHVyYWxDb21wYXJlIH1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTb3J0Q2FsbGJhY2sgPSBjcmVhdGVTb3J0Q2FsbGJhY2soe1xuXHRkb3ROdW06IHRydWUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFNvcnRDYWxsYmFja1xuXG5leHBvcnQgZnVuY3Rpb24gX21hdGNoKGE6IHN0cmluZywgYjogc3RyaW5nLCB7XG5cdHIsXG5cdG1haW5Gbixcblx0aXNTdWIsXG59KVxue1xuXHRsZXQgdGE6IFJlZ0V4cEV4ZWNBcnJheTtcblx0bGV0IHRiOiBSZWdFeHBFeGVjQXJyYXk7XG5cblx0aWYgKCh0YSA9IHIuZXhlYyhhKSkgJiYgKHRiID0gci5leGVjKGIpKSlcblx0e1xuXHRcdGxldCByID0gcGFyc2VJbnQodGFbMF0pIC0gcGFyc2VJbnQodGJbMF0pO1xuXG5cdFx0aWYgKHIgIT09IDApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHI7XG5cdFx0fVxuXG5cdFx0bGV0IGExID0gdGEuaW5wdXQuc2xpY2UodGFbMF0ubGVuZ3RoKTtcblx0XHRsZXQgYjEgPSB0Yi5pbnB1dC5zbGljZSh0YlswXS5sZW5ndGgpO1xuXG5cdFx0aWYgKGExICE9IGIxKVxuXHRcdHtcblx0XHRcdGxldCBpID0gMDtcblxuXHRcdFx0d2hpbGUgKHR5cGVvZiBhMVtpXSAhPSAndW5kZWZpbmVkJyAmJiBhMVtpXSA9PSBiMVtpXSAmJiAoIS9eXFxkJC8udGVzdChiMVswXSkpKVxuXHRcdFx0e1xuXHRcdFx0XHRpKys7XG5cdFx0XHR9XG5cblx0XHRcdGExID0gYTEuc2xpY2UoaSk7XG5cdFx0XHRiMSA9IGIxLnNsaWNlKGkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYWluRm4oYTEsIGIxLCB0cnVlKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX3RyaW0oaW5wdXQ6IHN0cmluZyk6IHN0cmluZ1xue1xuXHRyZXR1cm4gaW5wdXRcblx0XHQucmVwbGFjZSgvXltfXFxzXSsoXFxkKykvLCAnJDEnKVxuXHRcdC5yZXBsYWNlKC9eXFxEKFxcZCspLywgJyQxJylcblx0XHQudHJpbSgpXG5cdFx0O1xufVxuIl19