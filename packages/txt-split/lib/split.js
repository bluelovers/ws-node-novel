"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
const execall2_1 = require("execall2");
const console_1 = require("./console");
function splitVolumeSync(txt, cache) {
    let _vs;
    txt = String(txt);
    if (!cache || !cache.chapter || !cache.chapter.r) {
        throw new RangeError(`options.chapter.r is required`);
    }
    if (cache.beforeStart) {
        cache.beforeStart(cache);
    }
    MAIN: if (cache.volume) {
        let _r = cache.volume.r;
        let _m = execall2_1.execall(_r, txt, {
            cloneRegexp,
        });
        //console.debug(_r, _m, txt);
        if (!_m || !_m.length) {
            let msg = `volume match is empty ${_r}`;
            console_1.console.warn(msg);
            break MAIN;
            throw new Error(msg);
        }
        //console.log(_r, _m, _r.test(txt));
        _vs = splitChapterSync(txt, cache, _m, cache.volume);
    }
    if (!_vs) {
        _vs = {};
        _vs['00000_unknow'] = txt;
    }
    let _out = {};
    cache.ix = 0;
    for (let vn in _vs) {
        let txt = _vs[vn];
        let _r = cache.chapter.r;
        let _m = execall2_1.execall(_r, txt, {
            cloneRegexp,
        });
        //console.log(_r, _m, txt);
        //console.log(cache.ix);
        if (!_m || !_m.length) {
            let id = util_1.padIndex(cache.ix++, 5, '0');
            _out[vn] = {};
            _out[vn][`${id}_unknow`] = txt;
            continue;
        }
        let _cs = splitChapterSync(txt, cache, _m, cache.chapter);
        _out[vn] = {};
        for (let cn in _cs) {
            _out[vn][cn] = _cs[cn];
        }
    }
    function cloneRegexp(re) {
        let flags = (re.flags || '');
        if (flags.indexOf('g') === -1) {
            flags += 'g';
        }
        // @ts-ignore
        let r = new (cache.useRegExpCJK || RegExp)(re, flags);
        return r;
    }
    //console.log(_out);
    return _out;
}
exports.splitVolumeSync = splitVolumeSync;
function splitChapterSync(txt, cache, _m, splitOption) {
    let _files = {};
    let idx = 0;
    let { cb, ignoreCb, ignoreRe } = splitOption;
    txt = String(txt);
    cache.txt = txt;
    let m_last;
    let i;
    let ix = cache.ix || 0;
    let ii;
    for (i in _m) {
        ii = (parseInt(i) + ix).toString();
        let m = _m[i];
        if (ignoreRe) {
            if (ignoreRe.test(m.match)) {
                /**
                 * @todo here maybe will has bug, need test
                 */
                continue;
            }
            ignoreRe.lastIndex = 0;
        }
        if (!m_last && idx == 0 && m.index != 0) {
            //console.log(m);
            let id = util_1.padIndex(ii, 5, '0');
            let name = 'unknow';
            if (ignoreCb && ignoreCb({
                i,
                id,
                name,
                m,
                m_last,
                _files,
                ii,
                cache,
                idx,
            })) {
                continue;
            }
            if (cb) {
                let _ret = cb({
                    i,
                    id,
                    name,
                    m,
                    m_last,
                    _files,
                    ii,
                    cache,
                    idx,
                });
                if (_ret) {
                    id = _ret.id;
                    name = _ret.name;
                    idx = _ret.idx;
                }
            }
            name = id + '_' + name;
            let txt_clip = txt.slice(idx, m.index);
            if (txt_clip) {
                _files[name] = txt_clip;
                idx = m.index;
            }
        }
        else if (m_last) {
            let id = util_1.padIndex(ii, 5, '0');
            let name = util_1.fix_name(m_last.match);
            if (ignoreCb && ignoreCb({
                i,
                id,
                name,
                m,
                m_last,
                _files,
                ii,
                cache,
                idx,
            })) {
                continue;
            }
            if (cb) {
                let _ret = cb({
                    i,
                    id,
                    name,
                    m,
                    m_last,
                    _files,
                    ii,
                    cache,
                    idx,
                });
                if (_ret) {
                    id = _ret.id;
                    name = _ret.name;
                    idx = _ret.idx;
                }
            }
            //console.log(id, name, _ret);
            name = id + '_' + name;
            //console.log([name]);
            //name = `${id}_Actï¼š${StrUtil.toFullWidth(i.padStart(3, '0'))}`;
            let txt_clip = txt.slice(idx, m.index);
            if (txt_clip) {
                _files[name] = txt_clip;
                idx = m.index;
            }
        }
        m_last = m;
    }
    if (idx < txt.length - 1) {
        ii = (parseInt(i) + ix + 1).toString();
        let id = util_1.padIndex(ii, 5, '0');
        let name = util_1.fix_name(m_last.match);
        if (cb) {
            let m;
            let _ret = cb({
                i,
                id,
                name,
                m,
                m_last,
                _files,
                ii,
                cache,
                idx,
            });
            if (_ret) {
                id = _ret.id;
                name = _ret.name;
                idx = _ret.idx;
            }
        }
        name = (id !== '' ? id + '_' : '') + name;
        _files[name] = txt.slice(idx);
    }
    cache.ix = parseInt(ii) + 1;
    return _files;
}
exports.splitChapterSync = splitChapterSync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGxpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUE0QztBQVk1Qyx1Q0FBbUM7QUFDbkMsdUNBQW9DO0FBRXBDLFNBQWdCLGVBQWUsQ0FBaUMsR0FBYSxFQUFFLEtBQVE7SUFFdEYsSUFBSSxHQUFpQixDQUFDO0lBRXRCLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEIsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDaEQ7UUFDQyxNQUFNLElBQUksVUFBVSxDQUFDLCtCQUErQixDQUFDLENBQUE7S0FDckQ7SUFFRCxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQ3JCO1FBQ0MsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN6QjtJQUVELElBQUksRUFDSixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQ2hCO1FBQ0MsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxFQUFFLEdBQUcsa0JBQU8sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ3pCLFdBQVc7U0FDWCxDQUFDLENBQUM7UUFFSCw2QkFBNkI7UUFFN0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQ3JCO1lBQ0MsSUFBSSxHQUFHLEdBQUcseUJBQXlCLEVBQUUsRUFBRSxDQUFDO1lBRXhDLGlCQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWxCLE1BQU0sSUFBSSxDQUFDO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNyQjtRQUVELG9DQUFvQztRQUVwQyxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUs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QUMsQ0FBQztLQUM5QjtJQUVELEtBQUssQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU1QixPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUM7QUFqTUQsNENBaU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZml4X25hbWUsIHBhZEluZGV4IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7XG5cdElDb250ZXh0LFxuXHRJRGF0YUNoYXB0ZXIsXG5cdElEYXRhVm9sdW1lLFxuXHRJT3B0aW9ucyxcblx0SVNwbGl0Q2FjaGUsXG5cdElTcGxpdENCLFxuXHRJU3BsaXRNYXRjaCxcblx0SVNwbGl0TWF0Y2hJdGVtLFxuXHRJT3B0aW9uc1JlcXVpcmVkLCBJU3BsaXRPcHRpb24sXG59IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IGV4ZWNhbGwgfSBmcm9tICdleGVjYWxsMic7XG5pbXBvcnQgeyBjb25zb2xlIH0gZnJvbSAnLi9jb25zb2xlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0Vm9sdW1lU3luYzxPIGV4dGVuZHMgUGFydGlhbDxJU3BsaXRDYWNoZT4+KHR4dDogSUNvbnRleHQsIGNhY2hlOiBPKTogSURhdGFWb2x1bWVcbntcblx0bGV0IF92czogSURhdGFDaGFwdGVyO1xuXG5cdHR4dCA9IFN0cmluZyh0eHQpO1xuXG5cdGlmICghY2FjaGUgfHwgIWNhY2hlLmNoYXB0ZXIgfHwgIWNhY2hlLmNoYXB0ZXIucilcblx0e1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKGBvcHRpb25zLmNoYXB0ZXIuciBpcyByZXF1aXJlZGApXG5cdH1cblxuXHRpZiAoY2FjaGUuYmVmb3JlU3RhcnQpXG5cdHtcblx0XHRjYWNoZS5iZWZvcmVTdGFydChjYWNoZSk7XG5cdH1cblxuXHRNQUlOOlxuXHRpZiAoY2FjaGUudm9sdW1lKVxuXHR7XG5cdFx0bGV0IF9yID0gY2FjaGUudm9sdW1lLnI7XG5cblx0XHRsZXQgX20gPSBleGVjYWxsKF9yLCB0eHQsIHtcblx0XHRcdGNsb25lUmVnZXhwLFxuXHRcdH0pO1xuXG5cdFx0Ly9jb25zb2xlLmRlYnVnKF9yLCBfbSwgdHh0KTtcblxuXHRcdGlmICghX20gfHwgIV9tLmxlbmd0aClcblx0XHR7XG5cdFx0XHRsZXQgbXNnID0gYHZvbHVtZSBtYXRjaCBpcyBlbXB0eSAke19yfWA7XG5cblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXG5cdFx0XHRicmVhayBNQUlOO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKG1zZyk7XG5cdFx0fVxuXG5cdFx0Ly9jb25zb2xlLmxvZyhfciwgX20sIF9yLnRlc3QodHh0KSk7XG5cblx0XHRfdnMgPSBzcGxpdENoYXB0ZXJTeW5jKHR4dCwgY2FjaGUsIF9tLCBjYWNoZS52b2x1bWUpO1xuXHR9XG5cblx0aWYgKCFfdnMpXG5cdHtcblx0XHRfdnMgPSB7fTtcblx0XHRfdnNbJzAwMDAwX3Vua25vdyddID0gdHh0O1xuXHR9XG5cblx0bGV0IF9vdXQ6IElEYXRhVm9sdW1lID0ge307XG5cblx0Y2FjaGUuaXggPSAwO1xuXG5cdGZvciAobGV0IHZuIGluIF92cylcblx0e1xuXHRcdGxldCB0eHQgPSBfdnNbdm5dO1xuXG5cdFx0bGV0IF9yID0gY2FjaGUuY2hhcHRlci5yO1xuXHRcdGxldCBfbSA9IGV4ZWNhbGwoX3IsIHR4dCwge1xuXHRcdFx0Y2xvbmVSZWdleHAsXG5cdFx0fSk7XG5cblx0XHQvL2NvbnNvbGUubG9nKF9yLCBfbSwgdHh0KTtcblxuXHRcdC8vY29uc29sZS5sb2coY2FjaGUuaXgpO1xuXG5cdFx0aWYgKCFfbSB8fCAhX20ubGVuZ3RoKVxuXHRcdHtcblx0XHRcdGxldCBpZCA9IHBhZEluZGV4KGNhY2hlLml4KyssIDUsICcwJyk7XG5cblx0XHRcdF9vdXRbdm5dID0ge307XG5cblx0XHRcdF9vdXRbdm5dW2Ake2lkfV91bmtub3dgXSA9IHR4dDtcblxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0bGV0IF9jcyA9IHNwbGl0Q2hhcHRlclN5bmModHh0LCBjYWNoZSwgX20sIGNhY2hlLmNoYXB0ZXIpO1xuXG5cdFx0X291dFt2bl0gPSB7fTtcblxuXHRcdGZvciAobGV0IGNuIGluIF9jcylcblx0XHR7XG5cdFx0XHRfb3V0W3ZuXVtjbl0gPSBfY3NbY25dO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGNsb25lUmVnZXhwKHJlKVxuXHR7XG5cdFx0bGV0IGZsYWdzID0gKHJlLmZsYWdzIHx8ICcnKTtcblxuXHRcdGlmIChmbGFncy5pbmRleE9mKCdnJykgPT09IC0xKVxuXHRcdHtcblx0XHRcdGZsYWdzICs9ICdnJztcblx0XHR9XG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0bGV0IHIgPSBuZXcgKGNhY2hlLnVzZVJlZ0V4cENKSyB8fCBSZWdFeHApKHJlLCBmbGFncyk7XG5cblx0XHRyZXR1cm4gclxuXHR9XG5cblx0Ly9jb25zb2xlLmxvZyhfb3V0KTtcblxuXHRyZXR1cm4gX291dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0Q2hhcHRlclN5bmM8TyBleHRlbmRzIFBhcnRpYWw8SVNwbGl0Q2FjaGU+Pih0eHQ6IElDb250ZXh0LCBjYWNoZTogTywgX206IElTcGxpdE1hdGNoLCBzcGxpdE9wdGlvbjogSVNwbGl0T3B0aW9uKTogSURhdGFDaGFwdGVyPHN0cmluZz5cbntcblx0bGV0IF9maWxlczogSURhdGFDaGFwdGVyID0ge307XG5cdGxldCBpZHggPSAwO1xuXG5cdGxldCB7IGNiLCBpZ25vcmVDYiwgaWdub3JlUmUgfSA9IHNwbGl0T3B0aW9uO1xuXG5cdHR4dCA9IFN0cmluZyh0eHQpO1xuXG5cdGNhY2hlLnR4dCA9IHR4dDtcblxuXHRsZXQgbV9sYXN0O1xuXG5cdGxldCBpOiBzdHJpbmc7XG5cdGxldCBpeCA9IGNhY2hlLml4IHx8IDA7XG5cdGxldCBpaTogc3RyaW5nO1xuXG5cdGZvciAoaSBpbiBfbSlcblx0e1xuXHRcdGlpID0gKHBhcnNlSW50KGkpICsgaXgpLnRvU3RyaW5nKCk7XG5cblx0XHRsZXQgbSA9IF9tW2ldO1xuXG5cdFx0aWYgKGlnbm9yZVJlKVxuXHRcdHtcblx0XHRcdGlmIChpZ25vcmVSZS50ZXN0KG0ubWF0Y2gpKVxuXHRcdFx0e1xuXHRcdFx0XHQvKipcblx0XHRcdFx0ICogQHRvZG8gaGVyZSBtYXliZSB3aWxsIGhhcyBidWcsIG5lZWQgdGVzdFxuXHRcdFx0XHQgKi9cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlnbm9yZVJlLmxhc3RJbmRleCA9IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCFtX2xhc3QgJiYgaWR4ID09IDAgJiYgbS5pbmRleCAhPSAwKVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5sb2cobSk7XG5cblx0XHRcdGxldCBpZCA9IHBhZEluZGV4KGlpLCA1LCAnMCcpO1xuXHRcdFx0bGV0IG5hbWUgPSAndW5rbm93JztcblxuXHRcdFx0aWYgKGlnbm9yZUNiICYmIGlnbm9yZUNiKHtcblx0XHRcdFx0aSxcblx0XHRcdFx0aWQsXG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdG0sXG5cdFx0XHRcdG1fbGFzdCxcblx0XHRcdFx0X2ZpbGVzLFxuXHRcdFx0XHRpaSxcblx0XHRcdFx0Y2FjaGUsXG5cdFx0XHRcdGlkeCxcblx0XHRcdH0pKVxuXHRcdFx0e1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNiKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgX3JldCA9IGNiKHtcblx0XHRcdFx0XHRpLFxuXHRcdFx0XHRcdGlkLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0bSxcblx0XHRcdFx0XHRtX2xhc3QsXG5cdFx0XHRcdFx0X2ZpbGVzLFxuXHRcdFx0XHRcdGlpLFxuXHRcdFx0XHRcdGNhY2hlLFxuXHRcdFx0XHRcdGlkeCxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKF9yZXQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZCA9IF9yZXQuaWQ7XG5cdFx0XHRcdFx0bmFtZSA9IF9yZXQubmFtZTtcblx0XHRcdFx0XHRpZHggPSBfcmV0LmlkeDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRuYW1lID0gaWQgKyAnXycgKyBuYW1lO1xuXG5cdFx0XHRsZXQgdHh0X2NsaXAgPSB0eHQuc2xpY2UoaWR4LCBtLmluZGV4KTtcblxuXHRcdFx0aWYgKHR4dF9jbGlwKVxuXHRcdFx0e1xuXHRcdFx0XHRfZmlsZXNbbmFtZV0gPSB0eHRfY2xpcDtcblxuXHRcdFx0XHRpZHggPSBtLmluZGV4O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmIChtX2xhc3QpXG5cdFx0e1xuXHRcdFx0bGV0IGlkID0gcGFkSW5kZXgoaWksIDUsICcwJyk7XG5cdFx0XHRsZXQgbmFtZSA9IGZpeF9uYW1lKG1fbGFzdC5tYXRjaCk7XG5cblx0XHRcdGlmIChpZ25vcmVDYiAmJiBpZ25vcmVDYih7XG5cdFx0XHRcdGksXG5cdFx0XHRcdGlkLFxuXHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRtLFxuXHRcdFx0XHRtX2xhc3QsXG5cdFx0XHRcdF9maWxlcyxcblx0XHRcdFx0aWksXG5cdFx0XHRcdGNhY2hlLFxuXHRcdFx0XHRpZHgsXG5cdFx0XHR9KSlcblx0XHRcdHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjYilcblx0XHRcdHtcblx0XHRcdFx0bGV0IF9yZXQgPSBjYih7XG5cdFx0XHRcdFx0aSxcblx0XHRcdFx0XHRpZCxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdG0sXG5cdFx0XHRcdFx0bV9sYXN0LFxuXHRcdFx0XHRcdF9maWxlcyxcblx0XHRcdFx0XHRpaSxcblx0XHRcdFx0XHRjYWNoZSxcblx0XHRcdFx0XHRpZHgsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmIChfcmV0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWQgPSBfcmV0LmlkO1xuXHRcdFx0XHRcdG5hbWUgPSBfcmV0Lm5hbWU7XG5cdFx0XHRcdFx0aWR4ID0gX3JldC5pZHg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly9jb25zb2xlLmxvZyhpZCwgbmFtZSwgX3JldCk7XG5cblx0XHRcdG5hbWUgPSBpZCArICdfJyArIG5hbWU7XG5cblx0XHRcdC8vY29uc29sZS5sb2coW25hbWVdKTtcblxuXHRcdFx0Ly9uYW1lID0gYCR7aWR9X0FjdO+8miR7U3RyVXRpbC50b0Z1bGxXaWR0aChpLnBhZFN0YXJ0KDMsICcwJykpfWA7XG5cblx0XHRcdGxldCB0eHRfY2xpcCA9IHR4dC5zbGljZShpZHgsIG0uaW5kZXgpO1xuXG5cdFx0XHRpZiAodHh0X2NsaXApXG5cdFx0XHR7XG5cdFx0XHRcdF9maWxlc1tuYW1lXSA9IHR4dF9jbGlwO1xuXG5cdFx0XHRcdGlkeCA9IG0uaW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bV9sYXN0ID0gbTtcblx0fVxuXG5cdGlmIChpZHggPCB0eHQubGVuZ3RoIC0gMSlcblx0e1xuXHRcdGlpID0gKHBhcnNlSW50KGkpICsgaXggKyAxKS50b1N0cmluZygpO1xuXG5cdFx0bGV0IGlkID0gcGFkSW5kZXgoaWksIDUsICcwJyk7XG5cdFx0bGV0IG5hbWUgPSBmaXhfbmFtZShtX2xhc3QubWF0Y2gpO1xuXG5cdFx0aWYgKGNiKVxuXHRcdHtcblx0XHRcdGxldCBtO1xuXG5cdFx0XHRsZXQgX3JldCA9IGNiKHtcblx0XHRcdFx0aSxcblx0XHRcdFx0aWQsXG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdG0sXG5cdFx0XHRcdG1fbGFzdCxcblx0XHRcdFx0X2ZpbGVzLFxuXHRcdFx0XHRpaSxcblx0XHRcdFx0Y2FjaGUsXG5cdFx0XHRcdGlkeCxcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoX3JldClcblx0XHRcdHtcblx0XHRcdFx0aWQgPSBfcmV0LmlkO1xuXHRcdFx0XHRuYW1lID0gX3JldC5uYW1lO1xuXHRcdFx0XHRpZHggPSBfcmV0LmlkeDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRuYW1lID0gKGlkICE9PSAnJyA/IGlkICsgJ18nIDogJycpICsgbmFtZTtcblxuXHRcdF9maWxlc1tuYW1lXSA9IHR4dC5zbGljZShpZHgpO1xuXHR9XG5cblx0Y2FjaGUuaXggPSBwYXJzZUludChpaSkgKyAxO1xuXG5cdHJldHVybiBfZmlsZXM7XG59XG4iXX0=