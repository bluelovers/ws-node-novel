"use strict";
/**
 * Created by user on 2018/11/11/011.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs_iconv_1 = require("fs-iconv");
const regexp_cjk_1 = require("regexp-cjk");
const upath2_1 = require("upath2");
const split_1 = require("./split");
const util_1 = require("./util");
const fs = require("fs-extra");
exports.defaultOptions = Object.freeze({
    file: null,
    dirname: null,
    outDir: null,
    indexPadLength: 5,
    useRegExpCJK: true,
});
function makeOptions(inputFile, options) {
    let cache = Object.assign({
        ...exports.defaultOptions,
        file: inputFile,
    }, options, {
        file: options.file || inputFile
    });
    cache.dirname = upath2_1.default.dirname(cache.file);
    if (cache.useRegExpCJK) {
        if (typeof cache.useRegExpCJK !== 'function') {
            cache.useRegExpCJK = regexp_cjk_1.zhRegExp;
        }
    }
    return cache;
}
exports.makeOptions = makeOptions;
function _handleOptions(options) {
    let opts = Object.assign({
        ...exports.defaultOptions,
    }, {
        ...options,
    }, {
        volume: options.volume ? {
            ...options.volume,
        } : undefined,
        chapter: options.chapter ? {
            ...options.chapter,
        } : undefined,
    });
    _re(opts.volume);
    _re(opts.chapter);
    function _re(data) {
        if (data) {
            if (data.r) {
                const FLAGS = data.flags || 'gim';
                if (Array.isArray(data.r)) {
                    data.r = data.r.join('');
                }
                if (opts.useRegExpCJK || !(data.r instanceof RegExp)) {
                    let RE;
                    if (typeof opts.useRegExpCJK === 'function') {
                        // @ts-ignore
                        RE = opts.useRegExpCJK;
                    }
                    else if (opts.useRegExpCJK === true) {
                        // @ts-ignore
                        RE = regexp_cjk_1.zhRegExp;
                    }
                    else {
                        // @ts-ignore
                        RE = RegExp;
                    }
                    // @ts-ignore
                    data.r = new RE(data.r, data.r.flags || FLAGS);
                }
            }
            if (data.ignoreRe) {
                const FLAGS = data.ignoreFlags || 'i';
                if (Array.isArray(data.ignoreRe)) {
                    data.ignoreRe = data.ignoreRe.join('');
                }
                if (opts.useRegExpCJK || !(data.ignoreRe instanceof RegExp)) {
                    let RE;
                    if (typeof opts.useRegExpCJK === 'function') {
                        // @ts-ignore
                        RE = opts.useRegExpCJK;
                    }
                    else if (opts.useRegExpCJK === true) {
                        // @ts-ignore
                        RE = regexp_cjk_1.zhRegExp;
                    }
                    else {
                        // @ts-ignore
                        RE = RegExp;
                    }
                    // @ts-ignore
                    data.ignoreRe = new RE(data.ignoreRe, data.ignoreRe.flags || FLAGS);
                }
            }
            return true;
        }
    }
    // @ts-ignore
    return opts;
}
exports._handleOptions = _handleOptions;
async function autoFile(inputFile, options) {
    let opts = _handleOptions(options);
    let ret = await readFile(inputFile, opts);
    let ls = await outputFile(ret);
    return Object.assign(ret, {
        ls,
    });
}
exports.autoFile = autoFile;
async function readFile(inputFile, options) {
    let cache = makeOptions(inputFile, options);
    let txt = await fs_iconv_1.default.readFile(cache.file)
        .then(function (data) {
        return util_1._handleReadFile(data, cache.file);
    })
        .then(async (txt) => {
        if (options.readFileAfter) {
            let ret = await options.readFileAfter(txt);
            if (typeof ret === 'string') {
                return ret;
            }
        }
        return txt;
    });
    let data = await split_1.splitVolumeSync(txt, cache);
    return {
        options: cache,
        data,
    };
}
exports.readFile = readFile;
function readFileSync(inputFile, options) {
    let cache = makeOptions(inputFile, options);
    let txt;
    {
        let data = fs_iconv_1.default.readFileSync(cache.file);
        txt = util_1._handleReadFile(data, cache.file);
        if (options.readFileAfter) {
            let ret = options.readFileAfter(txt);
            if (typeof ret === 'string') {
                txt = ret;
            }
        }
    }
    let data = split_1.splitVolumeSync(txt, cache);
    return {
        options: cache,
        data,
    };
}
exports.readFileSync = readFileSync;
async function outputFile(data, options) {
    ({ data, options } = util_1._outputFile(data, options));
    let path_main = options.outDir || upath2_1.default.join(options.dirname, 'out');
    let ls = [];
    for (let vn in data) {
        for (let cn in data[vn]) {
            let file = upath2_1.default.join(fs_iconv_1.trimFilename(vn), fs_iconv_1.trimFilename(cn) + '.txt');
            await fs.outputFile(upath2_1.default.join(path_main, file), data[vn][cn]);
            ls.push(file);
        }
    }
    return ls;
}
exports.outputFile = outputFile;
function outputFileSync(data, options) {
    ({ data, options } = util_1._outputFile(data, options));
    let path_main = options.outDir || upath2_1.default.join(options.dirname, 'out');
    let ls = [];
    for (let vn in data) {
        for (let cn in data[vn]) {
            let file = upath2_1.default.join(fs_iconv_1.trimFilename(vn), fs_iconv_1.trimFilename(cn) + '.txt');
            fs.outputFileSync(upath2_1.default.join(path_main, file), data[vn][cn]);
            ls.push(file);
        }
    }
    return ls;
}
exports.outputFileSync = outputFileSync;
[
    'outputFile',
    'autoFile',
    'readFile',
]
    .forEach(function (key) {
    exports[key] = util_1._wrapMethod(exports[key]);
});
exports.default = autoFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsdUNBQWlEO0FBQ2pELDJDQUFzQztBQUN0QyxtQ0FBMEI7QUFVMUIsbUNBQTBDO0FBQzFDLGlDQUFtRTtBQUNuRSwrQkFBZ0M7QUFHbkIsUUFBQSxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMzQyxJQUFJLEVBQUUsSUFBSTtJQUNWLE9BQU8sRUFBRSxJQUFJO0lBQ2IsTUFBTSxFQUFFLElBQUk7SUFDWixjQUFjLEVBQUUsQ0FBQztJQUNqQixZQUFZLEVBQUUsSUFBSTtDQUNOLENBQUMsQ0FBQztBQUVmLFNBQWdCLFdBQVcsQ0FBcUIsU0FBb0IsRUFBRSxPQUFVO0lBRS9FLElBQUksS0FBSyxHQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDNUIsR0FBRyxzQkFBYztRQUNqQixJQUFJLEVBQUUsU0FBUztLQUNmLEVBQUUsT0FBTyxFQUFFO1FBQ1gsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUksU0FBUztLQUMvQixDQUFDLENBQUM7SUFFSCxLQUFLLENBQUMsT0FBTyxHQUFHLGdCQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV6QyxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQ3RCO1FBQ0MsSUFBSSxPQUFPLEtBQUssQ0FBQyxZQUFZLEtBQUssVUFBVSxFQUM1QztZQUNDLEtBQUssQ0FBQyxZQUFZLEdBQUcscUJBQVEsQ0FBQTtTQUM3QjtLQUNEO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDO0FBcEJELGtDQW9CQztBQUVELFNBQWdCLGNBQWMsQ0FBNEMsT0FBVTtJQUVuRixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3hCLEdBQUcsc0JBQWM7S0FDakIsRUFBRTtRQUNGLEdBQUcsT0FBTztLQUNWLEVBQUU7UUFDRixN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Q0FBQyxJQUFJLENBQUMsQ0FBQztTQUNkO0tBQ0Q7SUFFRCxPQUFPLEVBQUUsQ0FBQztBQUNYLENBQUM7QUF2QkQsd0NBdUJDO0FBRUQ7SUFDQyxZQUFZO0lBQ1osVUFBVTtJQUNWLFVBQVU7Q0FDVjtLQUNDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7SUFFckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGtCQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDekMsQ0FBQyxDQUFDLENBQ0Y7QUFFRCxrQkFBZSxRQUFRLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzExLzExLzAxMS5cbiAqL1xuXG5pbXBvcnQgZnNJY29udiwgeyB0cmltRmlsZW5hbWUgfSBmcm9tICdmcy1pY29udic7XG5pbXBvcnQgeyB6aFJlZ0V4cCB9IGZyb20gJ3JlZ2V4cC1jamsnO1xuaW1wb3J0IHBhdGggZnJvbSAndXBhdGgyJztcbmltcG9ydCB7XG5cdElDb250ZXh0LFxuXHRJRGF0YVZvbHVtZSxcblx0SU9wdGlvbnMsXG5cdElPcHRpb25zV2l0aERhdGEsXG5cdElQYXRoTGlrZSxcblx0SU9wdGlvbnNSZXF1aXJlZCwgSVJlZ0V4cExpa2UsXG5cdElPcHRpb25zUmVxdWlyZWRVc2VyLCBPdmVyd3JpdGUsIElTcGxpdE9wdGlvbixcbn0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgc3BsaXRWb2x1bWVTeW5jIH0gZnJvbSAnLi9zcGxpdCc7XG5pbXBvcnQgeyBfaGFuZGxlUmVhZEZpbGUsIF9vdXRwdXRGaWxlLCBfd3JhcE1ldGhvZCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHsgY29uc29sZSB9IGZyb20gJy4vY29uc29sZSc7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xuXHRmaWxlOiBudWxsLFxuXHRkaXJuYW1lOiBudWxsLFxuXHRvdXREaXI6IG51bGwsXG5cdGluZGV4UGFkTGVuZ3RoOiA1LFxuXHR1c2VSZWdFeHBDSks6IHRydWUsXG59IGFzIElPcHRpb25zKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VPcHRpb25zPE8gZXh0ZW5kcyBJT3B0aW9ucz4oaW5wdXRGaWxlOiBJUGF0aExpa2UsIG9wdGlvbnM6IE8pOiBPXG57XG5cdGxldCBjYWNoZTogTyA9IE9iamVjdC5hc3NpZ24oe1xuXHRcdC4uLmRlZmF1bHRPcHRpb25zLFxuXHRcdGZpbGU6IGlucHV0RmlsZSxcblx0fSwgb3B0aW9ucywge1xuXHRcdGZpbGU6IG9wdGlvbnMuZmlsZSB8fCBpbnB1dEZpbGVcblx0fSk7XG5cblx0Y2FjaGUuZGlybmFtZSA9IHBhdGguZGlybmFtZShjYWNoZS5maWxlKTtcblxuXHRpZiAoY2FjaGUudXNlUmVnRXhwQ0pLKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiBjYWNoZS51c2VSZWdFeHBDSksgIT09ICdmdW5jdGlvbicpXG5cdFx0e1xuXHRcdFx0Y2FjaGUudXNlUmVnRXhwQ0pLID0gemhSZWdFeHBcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaGFuZGxlT3B0aW9uczxPIGV4dGVuZHMgSU9wdGlvbnMgfCBJT3B0aW9uc1JlcXVpcmVkVXNlcj4ob3B0aW9uczogTyk6IE92ZXJ3cml0ZTxPLCBJT3B0aW9uc1JlcXVpcmVkPElSZWdFeHBMaWtlPj5cbntcblx0bGV0IG9wdHMgPSBPYmplY3QuYXNzaWduKHtcblx0XHQuLi5kZWZhdWx0T3B0aW9ucyxcblx0fSwge1xuXHRcdC4uLm9wdGlvbnMsXG5cdH0sIHtcblx0XHR2b2x1bWU6IG9wdGlvbnMudm9sdW1lID8ge1xuXHRcdFx0Li4ub3B0aW9ucy52b2x1bWUsXG5cdFx0fSA6IHVuZGVmaW5lZCxcblx0XHRjaGFwdGVyOiBvcHRpb25zLmNoYXB0ZXIgPyB7XG5cdFx0XHQuLi5vcHRpb25zLmNoYXB0ZXIsXG5cdFx0fSA6IHVuZGVmaW5lZCxcblx0fSk7XG5cblx0X3JlKG9wdHMudm9sdW1lKTtcblx0X3JlKG9wdHMuY2hhcHRlcik7XG5cblx0ZnVuY3Rpb24gX3JlKGRhdGE6IElTcGxpdE9wdGlvbjxhbnk+KTogZGF0YSBpcyBJU3BsaXRPcHRpb25cblx0e1xuXHRcdGlmIChkYXRhKVxuXHRcdHtcblx0XHRcdGlmIChkYXRhLnIpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0IEZMQUdTID0gZGF0YS5mbGFncyB8fCAnZ2ltJztcblxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShkYXRhLnIpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZGF0YS5yID0gZGF0YS5yLmpvaW4oJycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG9wdHMudXNlUmVnRXhwQ0pLIHx8ICEoZGF0YS5yIGluc3RhbmNlb2YgUmVnRXhwKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxldCBSRTogUmVnRXhwO1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBvcHRzLnVzZVJlZ0V4cENKSyA9PT0gJ2Z1bmN0aW9uJylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0XHRSRSA9IG9wdHMudXNlUmVnRXhwQ0pLXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKG9wdHMudXNlUmVnRXhwQ0pLID09PSB0cnVlKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRcdFJFID0gemhSZWdFeHBcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRcdFJFID0gUmVnRXhwXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdGRhdGEuciA9IG5ldyBSRShkYXRhLnIsIGRhdGEuci5mbGFncyB8fCBGTEFHUyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGRhdGEuaWdub3JlUmUpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0IEZMQUdTID0gZGF0YS5pZ25vcmVGbGFncyB8fCAnaSc7XG5cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoZGF0YS5pZ25vcmVSZSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkYXRhLmlnbm9yZVJlID0gZGF0YS5pZ25vcmVSZS5qb2luKCcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChvcHRzLnVzZVJlZ0V4cENKSyB8fCAhKGRhdGEuaWdub3JlUmUgaW5zdGFuY2VvZiBSZWdFeHApKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGV0IFJFOiBSZWdFeHA7XG5cblx0XHRcdFx0XHRpZiAodHlwZW9mIG9wdHMudXNlUmVnRXhwQ0pLID09PSAnZnVuY3Rpb24nKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdFx0XHRcdFJFID0gb3B0cy51c2VSZWdFeHBDSktcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAob3B0cy51c2VSZWdFeHBDSksgPT09IHRydWUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdFx0UkUgPSB6aFJlZ0V4cFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0XHRcdFx0UkUgPSBSZWdFeHBcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRcdFx0ZGF0YS5pZ25vcmVSZSA9IG5ldyBSRShkYXRhLmlnbm9yZVJlLCBkYXRhLmlnbm9yZVJlLmZsYWdzIHx8IEZMQUdTKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblx0fVxuXG5cdC8vIEB0cy1pZ25vcmVcblx0cmV0dXJuIG9wdHNcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF1dG9GaWxlPE8gZXh0ZW5kcyBJT3B0aW9uc1JlcXVpcmVkIHwgSU9wdGlvbnNSZXF1aXJlZFVzZXI+KGlucHV0RmlsZTogSVBhdGhMaWtlLCBvcHRpb25zOiBPKVxue1xuXHRsZXQgb3B0cyA9IF9oYW5kbGVPcHRpb25zKG9wdGlvbnMpO1xuXG5cdGxldCByZXQgPSBhd2FpdCByZWFkRmlsZShpbnB1dEZpbGUsIG9wdHMpO1xuXG5cdGxldCBsczogc3RyaW5nW10gPSBhd2FpdCBvdXRwdXRGaWxlKHJldCk7XG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24ocmV0LCB7XG5cdFx0bHMsXG5cdH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZEZpbGU8TyBleHRlbmRzIElPcHRpb25zPihpbnB1dEZpbGU6IElQYXRoTGlrZSwgb3B0aW9uczogTylcbntcblx0bGV0IGNhY2hlID0gbWFrZU9wdGlvbnMoaW5wdXRGaWxlLCBvcHRpb25zKTtcblxuXHRsZXQgdHh0OiBzdHJpbmcgPSBhd2FpdCBmc0ljb252LnJlYWRGaWxlKGNhY2hlLmZpbGUpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIF9oYW5kbGVSZWFkRmlsZShkYXRhLCBjYWNoZS5maWxlKTtcblx0XHR9KVxuXHRcdC50aGVuKGFzeW5jICh0eHQpID0+IHtcblxuXHRcdFx0aWYgKG9wdGlvbnMucmVhZEZpbGVBZnRlcilcblx0XHRcdHtcblx0XHRcdFx0bGV0IHJldCA9IGF3YWl0IG9wdGlvbnMucmVhZEZpbGVBZnRlcih0eHQpO1xuXG5cdFx0XHRcdGlmICh0eXBlb2YgcmV0ID09PSAnc3RyaW5nJylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR4dDtcblx0XHR9KVxuXHQ7XG5cblx0bGV0IGRhdGEgPSBhd2FpdCBzcGxpdFZvbHVtZVN5bmModHh0LCBjYWNoZSk7XG5cblx0cmV0dXJuIHtcblx0XHRvcHRpb25zOiBjYWNoZSxcblx0XHRkYXRhLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGVTeW5jPE8gZXh0ZW5kcyBJT3B0aW9ucz4oaW5wdXRGaWxlOiBJUGF0aExpa2UsIG9wdGlvbnM6IE8pXG57XG5cdGxldCBjYWNoZSA9IG1ha2VPcHRpb25zKGlucHV0RmlsZSwgb3B0aW9ucyk7XG5cblx0bGV0IHR4dDogSUNvbnRleHQ7XG5cblx0e1xuXHRcdGxldCBkYXRhID0gZnNJY29udi5yZWFkRmlsZVN5bmMoY2FjaGUuZmlsZSk7XG5cblx0XHR0eHQgPSBfaGFuZGxlUmVhZEZpbGUoZGF0YSwgY2FjaGUuZmlsZSlcblxuXHRcdGlmIChvcHRpb25zLnJlYWRGaWxlQWZ0ZXIpXG5cdFx0e1xuXHRcdFx0bGV0IHJldCA9IG9wdGlvbnMucmVhZEZpbGVBZnRlcih0eHQpO1xuXG5cdFx0XHRpZiAodHlwZW9mIHJldCA9PT0gJ3N0cmluZycpXG5cdFx0XHR7XG5cdFx0XHRcdHR4dCA9IHJldDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRsZXQgZGF0YSA9IHNwbGl0Vm9sdW1lU3luYyh0eHQsIGNhY2hlKTtcblxuXHRyZXR1cm4ge1xuXHRcdG9wdGlvbnM6IGNhY2hlLFxuXHRcdGRhdGEsXG5cdH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvdXRwdXRGaWxlKGRhdGE6IElEYXRhVm9sdW1lIHwgSU9wdGlvbnNXaXRoRGF0YSxcblx0b3B0aW9ucz86IFBhcnRpYWw8SU9wdGlvbnNXaXRoRGF0YT4sXG4pOiBQcm9taXNlPHN0cmluZ1tdPlxue1xuXHQoeyBkYXRhLCBvcHRpb25zIH0gPSBfb3V0cHV0RmlsZShkYXRhLCBvcHRpb25zKSk7XG5cblx0bGV0IHBhdGhfbWFpbiA9IG9wdGlvbnMub3V0RGlyIHx8IHBhdGguam9pbihvcHRpb25zLmRpcm5hbWUsICdvdXQnKTtcblxuXHRsZXQgbHM6IHN0cmluZ1tdID0gW107XG5cblx0Zm9yIChsZXQgdm4gaW4gZGF0YSlcblx0e1xuXHRcdGZvciAobGV0IGNuIGluIGRhdGFbdm5dKVxuXHRcdHtcblx0XHRcdGxldCBmaWxlID0gcGF0aC5qb2luKHRyaW1GaWxlbmFtZSh2biksIHRyaW1GaWxlbmFtZShjbikgKyAnLnR4dCcpO1xuXG5cdFx0XHRhd2FpdCBmcy5vdXRwdXRGaWxlKHBhdGguam9pbihwYXRoX21haW4sIGZpbGUpLCBkYXRhW3ZuXVtjbl0pO1xuXG5cdFx0XHRscy5wdXNoKGZpbGUpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBscztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG91dHB1dEZpbGVTeW5jKGRhdGE6IElEYXRhVm9sdW1lIHwgSU9wdGlvbnNXaXRoRGF0YSxcblx0b3B0aW9ucz86IFBhcnRpYWw8SU9wdGlvbnNXaXRoRGF0YT4sXG4pOiBzdHJpbmdbXVxue1xuXHQoeyBkYXRhLCBvcHRpb25zIH0gPSBfb3V0cHV0RmlsZShkYXRhLCBvcHRpb25zKSk7XG5cblx0bGV0IHBhdGhfbWFpbiA9IG9wdGlvbnMub3V0RGlyIHx8IHBhdGguam9pbihvcHRpb25zLmRpcm5hbWUsICdvdXQnKTtcblxuXHRsZXQgbHM6IHN0cmluZ1tdID0gW107XG5cblx0Zm9yIChsZXQgdm4gaW4gZGF0YSlcblx0e1xuXHRcdGZvciAobGV0IGNuIGluIGRhdGFbdm5dKVxuXHRcdHtcblx0XHRcdGxldCBmaWxlID0gcGF0aC5qb2luKHRyaW1GaWxlbmFtZSh2biksIHRyaW1GaWxlbmFtZShjbikgKyAnLnR4dCcpO1xuXG5cdFx0XHRmcy5vdXRwdXRGaWxlU3luYyhwYXRoLmpvaW4ocGF0aF9tYWluLCBmaWxlKSwgZGF0YVt2bl1bY25dKTtcblxuXHRcdFx0bHMucHVzaChmaWxlKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbHM7XG59XG5cbltcblx0J291dHB1dEZpbGUnLFxuXHQnYXV0b0ZpbGUnLFxuXHQncmVhZEZpbGUnLFxuXVxuXHQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KVxuXHR7XG5cdFx0ZXhwb3J0c1trZXldID0gX3dyYXBNZXRob2QoZXhwb3J0c1trZXldKVxuXHR9KVxuO1xuXG5leHBvcnQgZGVmYXVsdCBhdXRvRmlsZVxuIl19