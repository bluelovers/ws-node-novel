"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const novel_text_1 = require("novel-text");
const console_1 = require("./console");
const index_1 = require("./index");
const Bluebird = require("bluebird");
const iconv = require("iconv-jschardet");
const StrUtil = require("str-util");
const crlf_normalize_1 = require("crlf-normalize");
function logWarn(...argv) {
    return console_1.console.warn(...argv);
}
exports.logWarn = logWarn;
function chkEncoding(data, file) {
    let chk = iconv.detect(data);
    if (data.length === 0) {
        logWarn(file, '此檔案沒有內容');
    }
    else if (chk.encoding != 'UTF-8') {
        logWarn(file, '此檔案可能不是 UTF8 請檢查編碼或利用 MadEdit 等工具轉換', chk);
    }
    return chk;
}
exports.chkEncoding = chkEncoding;
function padIndex(n, maxLength = 5, fillString = '0') {
    let s = padIndexStart(n, maxLength - 1, fillString);
    return padIndexEnd(s, maxLength, fillString);
}
exports.padIndex = padIndex;
function padIndexStart(n, maxLength = 4, fillString = '0') {
    if (!['number', 'string'].includes(typeof n)) {
        throw TypeError(`n must is string | number`);
    }
    return String(n).padStart(maxLength, String(fillString));
}
exports.padIndexStart = padIndexStart;
function padIndexEnd(n, maxLength = 5, fillString = '0') {
    if (!['number', 'string'].includes(typeof n)) {
        throw TypeError(`n must is string | number`);
    }
    return String(n).padEnd(maxLength, String(fillString));
}
exports.padIndexEnd = padIndexEnd;
function _wrapMethod(fn) {
    return Bluebird.method(fn);
}
exports._wrapMethod = _wrapMethod;
function _handleReadFile(data, file) {
    chkEncoding(data, file);
    return crlf_normalize_1.crlf(novel_text_1.default.trim(String(data)), crlf_normalize_1.LF);
}
exports._handleReadFile = _handleReadFile;
function _outputFile(data, options) {
    if (data.data) {
        options = Object.assign({}, data.options, options);
        data = data.data;
    }
    options = index_1.makeOptions(options.file, options);
    return { data, options };
}
exports._outputFile = _outputFile;
function fix_name(name) {
    name = novel_text_1.default.trim(name, {
        trim: true,
    }).trim();
    if (!/^\d+/.test(name)) {
        name = StrUtil.zh2num(name).toString();
    }
    name = name
        //.replace(/^(\d+)[\-話话\s]*/, '$1　')
        .replace(/[“”]/g, '');
    name = StrUtil.zh2jp(name);
    //console.log([name]);
    return name;
}
exports.fix_name = fix_name;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBbUM7QUFDbkMsdUNBQW9DO0FBQ3BDLG1DQUFzQztBQUV0QyxxQ0FBc0M7QUFDdEMseUNBQTBDO0FBQzFDLG9DQUFxQztBQUNyQyxtREFBMEM7QUFFMUMsU0FBZ0IsT0FBTyxDQUFDLEdBQUcsSUFBSTtJQUU5QixPQUFPLGlCQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDN0IsQ0FBQztBQUhELDBCQUdDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLElBQWMsRUFBRSxJQUFhO0lBRXhELElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFN0IsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDckI7UUFDQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3pCO1NBQ0ksSUFBSSxHQUFHLENBQUMsUUFBUSxJQUFJLE9BQU8sRUFDaEM7UUFDQyxPQUFPLENBQUMsSUFBSSxFQUFFLHFDQUFxQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsT0FBTyxHQUFHLENBQUE7QUFDWCxDQUFDO0FBZEQsa0NBY0M7QUFFRCxTQUFnQixRQUFRLENBQUMsQ0FBa0IsRUFBRSxZQUFvQixDQUFDLEVBQUUsYUFBOEIsR0FBRztJQUVwRyxJQUFJLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFcEQsT0FBTyxXQUFXLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBTEQsNEJBS0M7QUFFRCxTQUFnQixhQUFhLENBQUMsQ0FBa0IsRUFBRSxZQUFvQixDQUFDLEVBQUUsYUFBOEIsR0FBRztJQUV6RyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQzVDO1FBQ0MsTUFBTSxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtLQUM1QztJQUVELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFDekQsQ0FBQztBQVJELHNDQVFDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLENBQWtCLEVBQUUsWUFBb0IsQ0FBQyxFQUFFLGFBQThCLEdBQUc7SUFFdkcsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUM1QztRQUNDLE1BQU0sU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUE7S0FDNUM7SUFFRCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBQ3ZELENBQUM7QUFSRCxrQ0FRQztBQUVELFNBQWdCLFdBQVcsQ0FBcUQsRUFBSztJQUVwRixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDM0IsQ0FBQztBQUhELGtDQUdDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLElBQWMsRUFBRSxJQUFlO0lBRTlELFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFeEIsT0FBTyxxQkFBSSxDQUFDLG9CQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLG1CQUFFLENBQUMsQ0FBQTtBQUM5QyxDQUFDO0FBTEQsMENBS0M7QUFFRCxTQUFnQixXQUFXLENBQXNDLElBQW9DLEVBQUUsT0FBVztJQUtqSCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQ2I7UUFDQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuRCxJQUFJLEdBQUksSUFBeUIsQ0FBQyxJQUFJLENBQUM7S0FDdkM7SUFFRCxPQUFPLEdBQUcsbUJBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUE7QUFDekIsQ0FBQztBQWRELGtDQWNDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLElBQVk7SUFFcEMsSUFBSSxHQUFHLG9CQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUMzQixJQUFJLEVBQUUsSUFBSTtLQUNWLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FFUjtJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUN0QjtRQUNDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3ZDO0lBRUQsSUFBSSxHQUFHLElBQUk7UUFDWCxvQ0FBb0M7U0FDbEMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FDckI7SUFFRCxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUzQixzQkFBc0I7SUFFdEIsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDO0FBdkJELDRCQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBub3ZlbFRleHQgZnJvbSAnbm92ZWwtdGV4dCc7XG5pbXBvcnQgeyBjb25zb2xlIH0gZnJvbSAnLi9jb25zb2xlJztcbmltcG9ydCB7IG1ha2VPcHRpb25zIH0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBJQ29udGV4dCwgSURhdGFWb2x1bWUsIElPcHRpb25zV2l0aERhdGEsIElQYXRoTGlrZSwgUmVzb2x2YWJsZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBCbHVlYmlyZCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5pbXBvcnQgaWNvbnYgPSByZXF1aXJlKCdpY29udi1qc2NoYXJkZXQnKTtcbmltcG9ydCBTdHJVdGlsID0gcmVxdWlyZSgnc3RyLXV0aWwnKTtcbmltcG9ydCB7IGNybGYsIExGIH0gZnJvbSAnY3JsZi1ub3JtYWxpemUnO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9nV2FybiguLi5hcmd2KVxue1xuXHRyZXR1cm4gY29uc29sZS53YXJuKC4uLmFyZ3YpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGtFbmNvZGluZyhkYXRhOiBJQ29udGV4dCwgZmlsZT86IHN0cmluZylcbntcblx0bGV0IGNoayA9IGljb252LmRldGVjdChkYXRhKTtcblxuXHRpZiAoZGF0YS5sZW5ndGggPT09IDApXG5cdHtcblx0XHRsb2dXYXJuKGZpbGUsICfmraTmqpTmoYjmspLmnInlhaflrrknKTtcblx0fVxuXHRlbHNlIGlmIChjaGsuZW5jb2RpbmcgIT0gJ1VURi04Jylcblx0e1xuXHRcdGxvZ1dhcm4oZmlsZSwgJ+atpOaqlOahiOWPr+iDveS4jeaYryBVVEY4IOiri+aqouafpee3qOeivOaIluWIqeeUqCBNYWRFZGl0IOetieW3peWFt+i9ieaPmycsIGNoayk7XG5cdH1cblxuXHRyZXR1cm4gY2hrXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRJbmRleChuOiBudW1iZXIgfCBzdHJpbmcsIG1heExlbmd0aDogbnVtYmVyID0gNSwgZmlsbFN0cmluZzogc3RyaW5nIHwgbnVtYmVyID0gJzAnKVxue1xuXHRsZXQgcyA9IHBhZEluZGV4U3RhcnQobiwgbWF4TGVuZ3RoIC0gMSwgZmlsbFN0cmluZyk7XG5cblx0cmV0dXJuIHBhZEluZGV4RW5kKHMsIG1heExlbmd0aCwgZmlsbFN0cmluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRJbmRleFN0YXJ0KG46IG51bWJlciB8IHN0cmluZywgbWF4TGVuZ3RoOiBudW1iZXIgPSA0LCBmaWxsU3RyaW5nOiBzdHJpbmcgfCBudW1iZXIgPSAnMCcpXG57XG5cdGlmICghWydudW1iZXInLCAnc3RyaW5nJ10uaW5jbHVkZXModHlwZW9mIG4pKVxuXHR7XG5cdFx0dGhyb3cgVHlwZUVycm9yKGBuIG11c3QgaXMgc3RyaW5nIHwgbnVtYmVyYClcblx0fVxuXG5cdHJldHVybiBTdHJpbmcobikucGFkU3RhcnQobWF4TGVuZ3RoLCBTdHJpbmcoZmlsbFN0cmluZykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRJbmRleEVuZChuOiBudW1iZXIgfCBzdHJpbmcsIG1heExlbmd0aDogbnVtYmVyID0gNSwgZmlsbFN0cmluZzogc3RyaW5nIHwgbnVtYmVyID0gJzAnKVxue1xuXHRpZiAoIVsnbnVtYmVyJywgJ3N0cmluZyddLmluY2x1ZGVzKHR5cGVvZiBuKSlcblx0e1xuXHRcdHRocm93IFR5cGVFcnJvcihgbiBtdXN0IGlzIHN0cmluZyB8IG51bWJlcmApXG5cdH1cblxuXHRyZXR1cm4gU3RyaW5nKG4pLnBhZEVuZChtYXhMZW5ndGgsIFN0cmluZyhmaWxsU3RyaW5nKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF93cmFwTWV0aG9kPFIsIEYgZXh0ZW5kcyAoLi4uYXJnczogdW5rbm93bltdKSA9PiBSZXNvbHZhYmxlPFI+PihmbjogRik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPEY+KSA9PiBCbHVlYmlyZDxSPlxue1xuXHRyZXR1cm4gQmx1ZWJpcmQubWV0aG9kKGZuKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2hhbmRsZVJlYWRGaWxlKGRhdGE6IElDb250ZXh0LCBmaWxlOiBJUGF0aExpa2UpXG57XG5cdGNoa0VuY29kaW5nKGRhdGEsIGZpbGUpO1xuXG5cdHJldHVybiBjcmxmKG5vdmVsVGV4dC50cmltKFN0cmluZyhkYXRhKSksIExGKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX291dHB1dEZpbGU8TyBleHRlbmRzIFBhcnRpYWw8SU9wdGlvbnNXaXRoRGF0YT4+KGRhdGE6IElEYXRhVm9sdW1lIHwgSU9wdGlvbnNXaXRoRGF0YSwgb3B0aW9ucz86IE8pOiB7XG5cdGRhdGE6IElEYXRhVm9sdW1lLFxuXHRvcHRpb25zOiBPLFxufVxue1xuXHRpZiAoZGF0YS5kYXRhKVxuXHR7XG5cdFx0b3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEub3B0aW9ucywgb3B0aW9ucyk7XG5cdFx0ZGF0YSA9IChkYXRhIGFzIElPcHRpb25zV2l0aERhdGEpLmRhdGE7XG5cdH1cblxuXHRvcHRpb25zID0gbWFrZU9wdGlvbnMob3B0aW9ucy5maWxlLCBvcHRpb25zKTtcblxuXHRyZXR1cm4geyBkYXRhLCBvcHRpb25zIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpeF9uYW1lKG5hbWU6IHN0cmluZyk6IHN0cmluZ1xue1xuXHRuYW1lID0gbm92ZWxUZXh0LnRyaW0obmFtZSwge1xuXHRcdHRyaW06IHRydWUsXG5cdH0pLnRyaW0oKVxuXHQvLy5yZXBsYWNlKCfnq6AnLCAn6KmxJylcblx0O1xuXG5cdGlmICghL15cXGQrLy50ZXN0KG5hbWUpKVxuXHR7XG5cdFx0bmFtZSA9IFN0clV0aWwuemgybnVtKG5hbWUpLnRvU3RyaW5nKCk7XG5cdH1cblxuXHRuYW1lID0gbmFtZVxuXHQvLy5yZXBsYWNlKC9eKFxcZCspW1xcLeipseivnVxcc10qLywgJyQx44CAJylcblx0XHQucmVwbGFjZSgvW+KAnOKAnV0vZywgJycpXG5cdDtcblxuXHRuYW1lID0gU3RyVXRpbC56aDJqcChuYW1lKTtcblxuXHQvL2NvbnNvbGUubG9nKFtuYW1lXSk7XG5cblx0cmV0dXJuIG5hbWU7XG59XG4iXX0=