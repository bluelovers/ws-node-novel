"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const novel_text_1 = require("novel-text");
const console_1 = require("./console");
const index_1 = require("./index");
const Bluebird = require("bluebird");
const iconv = require("iconv-jschardet");
const StrUtil = require("str-util");
const crlf_normalize_1 = require("crlf-normalize");
function logWarn(...argv) {
    return console_1.console.warn(...argv);
}
exports.logWarn = logWarn;
function chkEncoding(data, file, options) {
    let chk = iconv.detect(data);
    if (data.length === 0) {
        logWarn(file, '此檔案沒有內容');
    }
    else if (chk.encoding != 'UTF-8') {
        logWarn(file, '此檔案可能不是 UTF8 請檢查編碼或利用 MadEdit 等工具轉換', chk);
    }
    return chk;
}
exports.chkEncoding = chkEncoding;
function padIndex(n, maxLength = 5, fillString = '0') {
    let s = padIndexStart(n, maxLength - 1, fillString);
    return padIndexEnd(s, maxLength, fillString);
}
exports.padIndex = padIndex;
function padIndexStart(n, maxLength = 4, fillString = '0') {
    if (!['number', 'string'].includes(typeof n)) {
        throw TypeError(`n must is string | number`);
    }
    return String(n).padStart(maxLength, String(fillString));
}
exports.padIndexStart = padIndexStart;
function padIndexEnd(n, maxLength = 5, fillString = '0') {
    if (!['number', 'string'].includes(typeof n)) {
        throw TypeError(`n must is string | number`);
    }
    return String(n).padEnd(maxLength, String(fillString));
}
exports.padIndexEnd = padIndexEnd;
function _wrapMethod(fn) {
    return Bluebird.method(fn);
}
exports._wrapMethod = _wrapMethod;
function _handleReadFile(data, file, options) {
    let chk = chkEncoding(data, file, options);
    let txt;
    if (options && options.autoFsIconv && chk.encoding != 'UTF-8') {
        logWarn('嘗試自動將內容轉換為 UTF-8', chk);
        let buf = iconv.encode(data);
        let bool = buf.equals((Buffer.isBuffer(data) ? data : Buffer.from(data)));
        if (bool) {
            let chk2 = iconv.detect(buf);
            logWarn(`內容變更`, chk, '=>', chk2);
            data = buf;
        }
        else {
            logWarn(`內容無變化`);
        }
    }
    txt = String(data);
    return crlf_normalize_1.crlf(novel_text_1.default.trim(txt), crlf_normalize_1.LF);
}
exports._handleReadFile = _handleReadFile;
function _outputFile(data, options) {
    if (data.data) {
        options = Object.assign({}, data.options, options);
        data = data.data;
    }
    options = index_1.makeOptions(options.file, options);
    return { data, options };
}
exports._outputFile = _outputFile;
function fix_name(name) {
    name = novel_text_1.default.trim(name, {
        trim: true,
    }).trim();
    if (!/^\d+/.test(name)) {
        name = StrUtil.zh2num(name).toString();
    }
    name = name
        //.replace(/^(\d+)[\-話话\s]*/, '$1　')
        .replace(/[“”]/g, '');
    name = StrUtil.zh2jp(name);
    //console.log([name]);
    return name;
}
exports.fix_name = fix_name;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBbUM7QUFDbkMsdUNBQW9DO0FBQ3BDLG1DQUFzQztBQUV0QyxxQ0FBc0M7QUFDdEMseUNBQTBDO0FBQzFDLG9DQUFxQztBQUNyQyxtREFBMEM7QUFHMUMsU0FBZ0IsT0FBTyxDQUFDLEdBQUcsSUFBSTtJQUU5QixPQUFPLGlCQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUE7QUFDN0IsQ0FBQztBQUhELDBCQUdDO0FBRUQsU0FBZ0IsV0FBVyxDQUFxQixJQUFjLEVBQUUsSUFBYSxFQUFFLE9BQVc7SUFFekYsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU3QixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUNyQjtRQUNDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDekI7U0FDSSxJQUFJLEdBQUcsQ0FBQyxRQUFRLElBQUksT0FBTyxFQUNoQztRQUNDLE9BQU8sQ0FBQyxJQUFJLEVBQUUscUNBQXFDLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDMUQ7SUFFRCxPQUFPLEdBQUcsQ0FBQTtBQUNYLENBQUM7QUFkRCxrQ0FjQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxDQUFrQixFQUFFLFlBQW9CLENBQUMsRUFBRSxhQUE4QixHQUFHO0lBRXBHLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVwRCxPQUFPLFdBQVcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFMRCw0QkFLQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxDQUFrQixFQUFFLFlBQW9CLENBQUMsRUFBRSxhQUE4QixHQUFHO0lBRXpHLElB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O1FBQzNCLElBQUksRUFBRSxJQUFJO0tBQ1YsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUVSO0lBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3RCO1FBQ0MsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDdkM7SUFFRCxJQUFJLEdBQUcsSUFBSTtRQUNYLG9DQUFvQztTQUNsQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUNyQjtJQUVELElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNCLHNCQUFzQjtJQUV0QixPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUF2QkQsNEJBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5vdmVsVGV4dCBmcm9tICdub3ZlbC10ZXh0JztcbmltcG9ydCB7IGNvbnNvbGUgfSBmcm9tICcuL2NvbnNvbGUnO1xuaW1wb3J0IHsgbWFrZU9wdGlvbnMgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IElDb250ZXh0LCBJRGF0YVZvbHVtZSwgSU9wdGlvbnMsIElPcHRpb25zV2l0aERhdGEsIElQYXRoTGlrZSwgUmVzb2x2YWJsZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCBCbHVlYmlyZCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5pbXBvcnQgaWNvbnYgPSByZXF1aXJlKCdpY29udi1qc2NoYXJkZXQnKTtcbmltcG9ydCBTdHJVdGlsID0gcmVxdWlyZSgnc3RyLXV0aWwnKTtcbmltcG9ydCB7IGNybGYsIExGIH0gZnJvbSAnY3JsZi1ub3JtYWxpemUnO1xuaW1wb3J0IGZzSWNvbnYgPSByZXF1aXJlKCdmcy1pY29udicpO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9nV2FybiguLi5hcmd2KVxue1xuXHRyZXR1cm4gY29uc29sZS53YXJuKC4uLmFyZ3YpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGtFbmNvZGluZzxPIGV4dGVuZHMgSU9wdGlvbnM+KGRhdGE6IElDb250ZXh0LCBmaWxlPzogc3RyaW5nLCBvcHRpb25zPzogTylcbntcblx0bGV0IGNoayA9IGljb252LmRldGVjdChkYXRhKTtcblxuXHRpZiAoZGF0YS5sZW5ndGggPT09IDApXG5cdHtcblx0XHRsb2dXYXJuKGZpbGUsICfmraTmqpTmoYjmspLmnInlhaflrrknKTtcblx0fVxuXHRlbHNlIGlmIChjaGsuZW5jb2RpbmcgIT0gJ1VURi04Jylcblx0e1xuXHRcdGxvZ1dhcm4oZmlsZSwgJ+atpOaqlOahiOWPr+iDveS4jeaYryBVVEY4IOiri+aqouafpee3qOeivOaIluWIqeeUqCBNYWRFZGl0IOetieW3peWFt+i9ieaPmycsIGNoayk7XG5cdH1cblxuXHRyZXR1cm4gY2hrXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRJbmRleChuOiBudW1iZXIgfCBzdHJpbmcsIG1heExlbmd0aDogbnVtYmVyID0gNSwgZmlsbFN0cmluZzogc3RyaW5nIHwgbnVtYmVyID0gJzAnKVxue1xuXHRsZXQgcyA9IHBhZEluZGV4U3RhcnQobiwgbWF4TGVuZ3RoIC0gMSwgZmlsbFN0cmluZyk7XG5cblx0cmV0dXJuIHBhZEluZGV4RW5kKHMsIG1heExlbmd0aCwgZmlsbFN0cmluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRJbmRleFN0YXJ0KG46IG51bWJlciB8IHN0cmluZywgbWF4TGVuZ3RoOiBudW1iZXIgPSA0LCBmaWxsU3RyaW5nOiBzdHJpbmcgfCBudW1iZXIgPSAnMCcpXG57XG5cdGlmICghWydudW1iZXInLCAnc3RyaW5nJ10uaW5jbHVkZXModHlwZW9mIG4pKVxuXHR7XG5cdFx0dGhyb3cgVHlwZUVycm9yKGBuIG11c3QgaXMgc3RyaW5nIHwgbnVtYmVyYClcblx0fVxuXG5cdHJldHVybiBTdHJpbmcobikucGFkU3RhcnQobWF4TGVuZ3RoLCBTdHJpbmcoZmlsbFN0cmluZykpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRJbmRleEVuZChuOiBudW1iZXIgfCBzdHJpbmcsIG1heExlbmd0aDogbnVtYmVyID0gNSwgZmlsbFN0cmluZzogc3RyaW5nIHwgbnVtYmVyID0gJzAnKVxue1xuXHRpZiAoIVsnbnVtYmVyJywgJ3N0cmluZyddLmluY2x1ZGVzKHR5cGVvZiBuKSlcblx0e1xuXHRcdHRocm93IFR5cGVFcnJvcihgbiBtdXN0IGlzIHN0cmluZyB8IG51bWJlcmApXG5cdH1cblxuXHRyZXR1cm4gU3RyaW5nKG4pLnBhZEVuZChtYXhMZW5ndGgsIFN0cmluZyhmaWxsU3RyaW5nKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF93cmFwTWV0aG9kPFIsIEYgZXh0ZW5kcyAoLi4uYXJnczogdW5rbm93bltdKSA9PiBSZXNvbHZhYmxlPFI+PihmbjogRik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPEY+KSA9PiBCbHVlYmlyZDxSPlxue1xuXHRyZXR1cm4gQmx1ZWJpcmQubWV0aG9kKGZuKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2hhbmRsZVJlYWRGaWxlPE8gZXh0ZW5kcyBJT3B0aW9ucz4oZGF0YTogSUNvbnRleHQsIGZpbGU6IElQYXRoTGlrZSwgb3B0aW9ucz86IE8pXG57XG5cdGxldCBjaGsgPSBjaGtFbmNvZGluZyhkYXRhLCBmaWxlLCBvcHRpb25zKTtcblxuXHRsZXQgdHh0OiBzdHJpbmc7XG5cblx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hdXRvRnNJY29udiAmJiBjaGsuZW5jb2RpbmcgIT0gJ1VURi04Jylcblx0e1xuXHRcdGxvZ1dhcm4oJ+WYl+ippuiHquWLleWwh+WFp+Wuuei9ieaPm+eCuiBVVEYtOCcsIGNoayk7XG5cblx0XHRsZXQgYnVmID0gaWNvbnYuZW5jb2RlKGRhdGEpO1xuXG5cdFx0bGV0IGJvb2wgPSBidWYuZXF1YWxzKChCdWZmZXIuaXNCdWZmZXIoZGF0YSkgPyBkYXRhIDogQnVmZmVyLmZyb20oZGF0YSkpKTtcblxuXHRcdGlmIChib29sKVxuXHRcdHtcblx0XHRcdGxldCBjaGsyID0gaWNvbnYuZGV0ZWN0KGJ1Zik7XG5cblx0XHRcdGxvZ1dhcm4oYOWFp+WuueiuiuabtGAsIGNoaywgJz0+JywgY2hrMik7XG5cblx0XHRcdGRhdGEgPSBidWY7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRsb2dXYXJuKGDlhaflrrnnhKHororljJZgKTtcblx0XHR9XG5cdH1cblxuXHR0eHQgPSBTdHJpbmcoZGF0YSk7XG5cblx0cmV0dXJuIGNybGYobm92ZWxUZXh0LnRyaW0odHh0KSwgTEYpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfb3V0cHV0RmlsZTxPIGV4dGVuZHMgUGFydGlhbDxJT3B0aW9uc1dpdGhEYXRhPj4oZGF0YTogSURhdGFWb2x1bWUgfCBJT3B0aW9uc1dpdGhEYXRhLCBvcHRpb25zPzogTyk6IHtcblx0ZGF0YTogSURhdGFWb2x1bWUsXG5cdG9wdGlvbnM6IE8sXG59XG57XG5cdGlmIChkYXRhLmRhdGEpXG5cdHtcblx0XHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YS5vcHRpb25zLCBvcHRpb25zKTtcblx0XHRkYXRhID0gKGRhdGEgYXMgSU9wdGlvbnNXaXRoRGF0YSkuZGF0YTtcblx0fVxuXG5cdG9wdGlvbnMgPSBtYWtlT3B0aW9ucyhvcHRpb25zLmZpbGUsIG9wdGlvbnMpO1xuXG5cdHJldHVybiB7IGRhdGEsIG9wdGlvbnMgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZml4X25hbWUobmFtZTogc3RyaW5nKTogc3RyaW5nXG57XG5cdG5hbWUgPSBub3ZlbFRleHQudHJpbShuYW1lLCB7XG5cdFx0dHJpbTogdHJ1ZSxcblx0fSkudHJpbSgpXG5cdC8vLnJlcGxhY2UoJ+eroCcsICfoqbEnKVxuXHQ7XG5cblx0aWYgKCEvXlxcZCsvLnRlc3QobmFtZSkpXG5cdHtcblx0XHRuYW1lID0gU3RyVXRpbC56aDJudW0obmFtZSkudG9TdHJpbmcoKTtcblx0fVxuXG5cdG5hbWUgPSBuYW1lXG5cdC8vLnJlcGxhY2UoL14oXFxkKylbXFwt6Kmx6K+dXFxzXSovLCAnJDHjgIAnKVxuXHRcdC5yZXBsYWNlKC9b4oCc4oCdXS9nLCAnJylcblx0O1xuXG5cdG5hbWUgPSBTdHJVdGlsLnpoMmpwKG5hbWUpO1xuXG5cdC8vY29uc29sZS5sb2coW25hbWVdKTtcblxuXHRyZXR1cm4gbmFtZTtcbn1cbiJdfQ==