"use strict";
/**
 * Created by user on 2020/1/15.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const marked_1 = __importDefault(require("marked"));
const core_1 = require("../core");
function getobjectbyid(a, conf) {
    let ret = conf;
    for (let i of a) {
        ret = ret[i];
    }
    return ret;
}
exports.getobjectbyid = getobjectbyid;
/**
 * Add `str` to `obj` with the given `keys`
 * which represents the traversal path.
 *
 * @api private
 */
function put(obj, keys, str, code, table, options = {}, others = {}) {
    let target = obj;
    let last;
    let key;
    for (let i = 0; i < keys.length; i++) {
        key = keys[i];
        last = target;
        target[key] = target[key] || {};
        target = target[key];
    }
    // code
    if (code) {
        if (!Array.isArray(last[key]))
            last[key] = [];
        last[key].push(str);
        return;
    }
    // table
    if (table) {
        if (!Array.isArray(last[key]))
            last[key] = [];
        for (let ri = 0; ri < table.rows.length; ri++) {
            let arrItem = {};
            for (let hi = 0; hi < table.headers.length; hi++) {
                arrItem[normalize(table.headers[hi], options)] = table.rows[ri][hi];
            }
            last[key].push(arrItem);
        }
        return;
    }
    let isKey;
    let i = str.indexOf(':');
    if (options.filterObjectKey) {
        if (typeof options.filterObjectKey == 'function') {
            isKey = options.filterObjectKey(str, obj, others);
        }
        else {
            i = str.search(options.filterObjectKey);
            isKey = i != -1;
        }
    }
    // list
    if ((isKey === false || -1 == i || others.type == 'text2')) {
        if (!Array.isArray(last[key]))
            last[key] = [];
        last[key].push(str.trim());
        return;
    }
    // map
    key = normalize(str.slice(0, i), options);
    let val = str.slice(i + 1).trim();
    target[key] = val;
}
exports.put = put;
/**
 * Normalize `str`.
 */
function normalize(str, options = {}) {
    let key = str.replace(/\s+/g, ' ');
    if (!options.disableKeyToLowerCase) {
        key = key.toLowerCase();
    }
    return key.trim();
}
exports.normalize = normalize;
function makeCodeBlock(value, lang) {
    return `\n\`\`\`${lang || ''}\n${value}\n\`\`\`\n`;
}
exports.makeCodeBlock = makeCodeBlock;
function createInlineLexer(toks, options) {
    let opts = Object.assign({}, core_1.defaultOptionsParse.markedOptions, options.markedOptions);
    // @ts-ignore
    let inline = new marked_1.default.InlineLexer(toks.links, opts);
    return inline;
}
exports.createInlineLexer = createInlineLexer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7OztBQUVILG9EQUEyQztBQUUzQyxrQ0FBNkQ7QUFFN0QsU0FBZ0IsYUFBYSxDQUFvQixDQUFXLEVBQUUsSUFBWTtJQUV6RSxJQUFJLEdBQUcsR0FBRyxJQUFXLENBQUM7SUFDdEIsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2Y7UUFDQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2I7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFSRCxzQ0FRQztBQVFEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsR0FBRyxDQUFDLEdBQUcsRUFDdEIsSUFBYyxFQUNkLEdBQVcsRUFDWCxJQUFjLEVBQ2QsS0FBYyxFQUNkLFVBQXlCLEVBQUUsRUFDM0IsU0FFSSxFQUFFO0lBR04sSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxHQUFHLENBQUM7SUFFUixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFDcEM7UUFDQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDckI7SUFFRCxPQUFPO0lBQ1AsSUFBSSxJQUFJLEVBQ1I7UUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzlD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QTBCO0lBRTlELE9BQU8sV0FBVyxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssWUFBWSxDQUFDO0FBQ3BELENBQUM7QUFIRCxzQ0FHQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLElBQW1CLEVBQUUsT0FBc0I7SUFFNUUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsMEJBQW1CLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV2RixhQUFhO0lBQ2IsSUFBSSxNQUFNLEdBQUcsSUFBSSxnQkFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRWxELE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQVJELDhDQVFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAyMC8xLzE1LlxuICovXG5cbmltcG9ydCBtZCwgeyBUb2tlbiwgVG9rZW5zIH0gZnJvbSAnbWFya2VkJztcbmltcG9ydCB7IElUb2tlblRleHQyLCBSYXdPYmplY3QsIElSYXdPYmplY3REYXRhUGx1cyB9IGZyb20gJy4vUmF3T2JqZWN0JztcbmltcG9ydCB7IElPcHRpb25zUGFyc2UsIGRlZmF1bHRPcHRpb25zUGFyc2UgfSBmcm9tICcuLi9jb3JlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldG9iamVjdGJ5aWQ8VCBleHRlbmRzIHVua25vd24+KGE6IHN0cmluZ1tdLCBjb25mOiBvYmplY3QpOiBUXG57XG5cdGxldCByZXQgPSBjb25mIGFzIGFueTtcblx0Zm9yIChsZXQgaSBvZiBhKVxuXHR7XG5cdFx0cmV0ID0gcmV0W2ldO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRhYmxlXG57XG5cdGhlYWRlcnM6IFRva2Vucy5UYWJsZVtcImhlYWRlclwiXSxcblx0cm93czogVG9rZW5zLlRhYmxlW1wiY2VsbHNcIl0sXG59XG5cbi8qKlxuICogQWRkIGBzdHJgIHRvIGBvYmpgIHdpdGggdGhlIGdpdmVuIGBrZXlzYFxuICogd2hpY2ggcmVwcmVzZW50cyB0aGUgdHJhdmVyc2FsIHBhdGguXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdXQob2JqLFxuXHRrZXlzOiBzdHJpbmdbXSxcblx0c3RyOiBzdHJpbmcsXG5cdGNvZGU/OiBib29sZWFuLFxuXHR0YWJsZT86IElUYWJsZSxcblx0b3B0aW9uczogSU9wdGlvbnNQYXJzZSA9IHt9LFxuXHRvdGhlcnM6IHtcblx0XHR0eXBlPzogKFRva2VuIHwgSVRva2VuVGV4dDIpW1widHlwZVwiXSxcblx0fSA9IHt9LFxuKVxue1xuXHRsZXQgdGFyZ2V0ID0gb2JqO1xuXHRsZXQgbGFzdDtcblx0bGV0IGtleTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspXG5cdHtcblx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdGxhc3QgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0W2tleV0gPSB0YXJnZXRba2V5XSB8fCB7fTtcblx0XHR0YXJnZXQgPSB0YXJnZXRba2V5XTtcblx0fVxuXG5cdC8vIGNvZGVcblx0aWYgKGNvZGUpXG5cdHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkobGFzdFtrZXldKSkgbGFzdFtrZXldID0gW107XG5cdFx0bGFzdFtrZXldLnB1c2goc3RyKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyB0YWJsZVxuXHRpZiAodGFibGUpXG5cdHtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkobGFzdFtrZXldKSkgbGFzdFtrZXldID0gW107XG5cdFx0Zm9yIChsZXQgcmkgPSAwOyByaSA8IHRhYmxlLnJvd3MubGVuZ3RoOyByaSsrKVxuXHRcdHtcblx0XHRcdGxldCBhcnJJdGVtID0ge30gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblx0XHRcdGZvciAobGV0IGhpID0gMDsgaGkgPCB0YWJsZS5oZWFkZXJzLmxlbmd0aDsgaGkrKylcblx0XHRcdHtcblx0XHRcdFx0YXJySXRlbVtub3JtYWxpemUodGFibGUuaGVhZGVyc1toaV0sIG9wdGlvbnMpXSA9IHRhYmxlLnJvd3NbcmldW2hpXTtcblx0XHRcdH1cblx0XHRcdGxhc3Rba2V5XS5wdXNoKGFyckl0ZW0pO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHRsZXQgaXNLZXk6IGJvb2xlYW47XG5cdGxldCBpOiBudW1iZXIgPSBzdHIuaW5kZXhPZignOicpO1xuXG5cdGlmIChvcHRpb25zLmZpbHRlck9iamVjdEtleSlcblx0e1xuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5maWx0ZXJPYmplY3RLZXkgPT0gJ2Z1bmN0aW9uJylcblx0XHR7XG5cdFx0XHRpc0tleSA9IG9wdGlvbnMuZmlsdGVyT2JqZWN0S2V5KHN0ciwgb2JqLCBvdGhlcnMpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aSA9IHN0ci5zZWFyY2gob3B0aW9ucy5maWx0ZXJPYmplY3RLZXkpO1xuXHRcdFx0aXNLZXkgPSBpICE9IC0xO1xuXHRcdH1cblx0fVxuXG5cdC8vIGxpc3Rcblx0aWYgKChpc0tleSA9PT0gZmFsc2UgfHwgLTEgPT0gaSB8fCBvdGhlcnMudHlwZSA9PSAndGV4dDInKSlcblx0e1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShsYXN0W2tleV0pKSBsYXN0W2tleV0gPSBbXTtcblx0XHRsYXN0W2tleV0ucHVzaChzdHIudHJpbSgpKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBtYXBcblx0a2V5ID0gbm9ybWFsaXplKHN0ci5zbGljZSgwLCBpKSwgb3B0aW9ucyk7XG5cdGxldCB2YWwgPSBzdHIuc2xpY2UoaSArIDEpLnRyaW0oKTtcblx0dGFyZ2V0W2tleV0gPSB2YWw7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGBzdHJgLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUoc3RyOiBzdHJpbmcsIG9wdGlvbnM6IElPcHRpb25zUGFyc2UgPSB7fSk6IHN0cmluZ1xue1xuXHRsZXQga2V5ID0gc3RyLnJlcGxhY2UoL1xccysvZywgJyAnKTtcblxuXHRpZiAoIW9wdGlvbnMuZGlzYWJsZUtleVRvTG93ZXJDYXNlKVxuXHR7XG5cdFx0a2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cdH1cblxuXHRyZXR1cm4ga2V5LnRyaW0oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDb2RlQmxvY2sodmFsdWUsIGxhbmc/OiBUb2tlbnMuQ29kZVtcImxhbmdcIl0pXG57XG5cdHJldHVybiBgXFxuXFxgXFxgXFxgJHtsYW5nIHx8ICcnfVxcbiR7dmFsdWV9XFxuXFxgXFxgXFxgXFxuYDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUlubGluZUxleGVyKHRva3M6IG1kLlRva2Vuc0xpc3QsIG9wdGlvbnM6IElPcHRpb25zUGFyc2UpXG57XG5cdGxldCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnNQYXJzZS5tYXJrZWRPcHRpb25zLCBvcHRpb25zLm1hcmtlZE9wdGlvbnMpO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0bGV0IGlubGluZSA9IG5ldyBtZC5JbmxpbmVMZXhlcih0b2tzLmxpbmtzLCBvcHRzKTtcblxuXHRyZXR1cm4gaW5saW5lO1xufVxuIl19