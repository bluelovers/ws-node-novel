"use strict";
/**
 * Created by user on 2020/1/15.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
exports.SYMBOL_RAW_DATA = Symbol.for('raw_data');
exports.SYMBOL_RAW_VALUE = Symbol.for('raw_value');
class RawObject {
    constructor(source, raw) {
        if (raw) {
            this[exports.SYMBOL_RAW_DATA] = raw;
        }
        this[exports.SYMBOL_RAW_VALUE] = source;
    }
    inspect() {
        let pad = this[exports.SYMBOL_RAW_DATA] && this[exports.SYMBOL_RAW_DATA].type;
        return 'Raw' + this.getTypeof().replace(/^[a-z]/, function (s) {
            return s.toUpperCase();
        }) + `(${util_1.inspect(this.getRawValue())}${pad ? ', ' + pad : ''})`;
    }
    toJSON() {
        return this.toString();
    }
    toString() {
        return this[exports.SYMBOL_RAW_VALUE].toString();
    }
    getTypeof() {
        return Array.isArray(this[exports.SYMBOL_RAW_VALUE]) ? 'array' : typeof this[exports.SYMBOL_RAW_VALUE];
    }
    getRawData() {
        return this[exports.SYMBOL_RAW_DATA];
    }
    getRawValue() {
        return this[exports.SYMBOL_RAW_VALUE];
    }
    static isRawObject(v) {
        return (v instanceof RawObject);
    }
    static removeRawData(data) {
        if (this.isRawObject(data)) {
            data = data.getRawValue();
        }
        if (typeof data == 'object') {
            for (let i in data) {
                data[i] = this.removeRawData(data[i]);
            }
        }
        return data;
    }
}
exports.RawObject = RawObject;
exports.default = RawObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmF3T2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmF3T2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7QUFFSCwrQkFBK0I7QUFHbEIsUUFBQSxlQUFlLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN6QyxRQUFBLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUF3QnhELE1BQWEsU0FBUztJQUtyQixZQUFZLE1BQVUsRUFBRSxHQUFRO1FBRS9CLElBQUksR0FBRyxFQUNQO1lBQ0MsSUFBSSxDQUFDLHVCQUFlLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDNUI7UUFFRCxJQUFJLENBQUMsd0JBQWdCLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUVELE9BQU87UUFFTixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsdUJBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyx1QkFBZSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRTlELE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQztZQUU1RCxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUMsR0FBRyxJQUFJLGNBQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFBO0lBQ2hFLENBQUM7SUFFRCxNQUFNO1FBRUwsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVE7UUFFUCxPQUFPLElBQUksQ0FBQyx3QkFBZ0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxTQUFTO1FBRVIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsd0JBQWdCLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRUQsVUFBVTtRQUVULE9BQU8sSUFBSSxDQUFDLHVCQUFlLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsV0FBVztRQUVWLE9BQU8sSUFBSSxDQUFDLHdCQUFnQixDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUlELE1BQU0sQ0FBQyxXQUFXLENBQStDLENBQU07UUFFdEUsT0FBTyxDQUFDLENBQUMsWUFBWSxTQUFTLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBU0QsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJO1FBRXhCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFDMUI7WUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzFCO1FBRUQsSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQzNCO1lBQ0MsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQ2xCO2dCQUNDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FFRDtBQWxGRCw4QkFrRkM7QUFFRCxrQkFBZSxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDIwLzEvMTUuXG4gKi9cblxuaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gXCJ1dGlsXCI7XG5pbXBvcnQgeyBUb2tlbiwgVG9rZW5zIH0gZnJvbSAnbWFya2VkJztcblxuZXhwb3J0IGNvbnN0IFNZTUJPTF9SQVdfREFUQSA9IFN5bWJvbC5mb3IoJ3Jhd19kYXRhJyk7XG5leHBvcnQgY29uc3QgU1lNQk9MX1JBV19WQUxVRSA9IFN5bWJvbC5mb3IoJ3Jhd192YWx1ZScpO1xuXG5leHBvcnQgdHlwZSBJUmF3T2JqZWN0RGF0YSA9IFRva2VuIHwgSVJhd09iamVjdEJsb2NrcXVvdGUgfCBJUmF3T2JqZWN0RGF0YVBsdXM7XG5leHBvcnQgdHlwZSBJUmF3T2JqZWN0RGF0YVBsdXMgPSBJUmF3T2JqZWN0VG9rZW5QbHVzPFRva2Vucy5IVE1MPiB8IElSYXdPYmplY3RUb2tlblBsdXM8VG9rZW5zLkNvZGU+O1xuXG5leHBvcnQgdHlwZSBJUmF3T2JqZWN0UGx1cyA9IFJhd09iamVjdDxzdHJpbmcsIElSYXdPYmplY3REYXRhUGx1cz47XG5cbmV4cG9ydCB0eXBlIElSYXdPYmplY3RUb2tlblBsdXM8VCBleHRlbmRzIFRva2Vucy5IVE1MIHwgVG9rZW5zLkNvZGU+ID0gVCAmIHtcblx0cGFyYWdyYXBoOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUb2tlblRleHQyIGV4dGVuZHMgT21pdDxUb2tlbnMuVGV4dCwgJ3R5cGUnPlxue1xuXHR0eXBlOiAndGV4dDInO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSYXdPYmplY3RCbG9ja3F1b3RlXG57XG5cdHR5cGU6ICdibG9ja3F1b3RlJyxcblx0dGV4dDogc3RyaW5nW10sXG5cblx0cGFyYWdyYXBoOiBzdHJpbmdbXSxcbn1cblxuZXhwb3J0IGNsYXNzIFJhd09iamVjdDxSViBleHRlbmRzIHVua25vd24sIFJEIGV4dGVuZHMgSVJhd09iamVjdERhdGE+XG57XG5cdFtTWU1CT0xfUkFXX0RBVEFdOiBSRDtcblx0W1NZTUJPTF9SQVdfVkFMVUVdOiBSVjtcblxuXHRjb25zdHJ1Y3Rvcihzb3VyY2U6IFJWLCByYXc/OiBSRClcblx0e1xuXHRcdGlmIChyYXcpXG5cdFx0e1xuXHRcdFx0dGhpc1tTWU1CT0xfUkFXX0RBVEFdID0gcmF3O1xuXHRcdH1cblxuXHRcdHRoaXNbU1lNQk9MX1JBV19WQUxVRV0gPSBzb3VyY2U7XG5cdH1cblxuXHRpbnNwZWN0KClcblx0e1xuXHRcdGxldCBwYWQgPSB0aGlzW1NZTUJPTF9SQVdfREFUQV0gJiYgdGhpc1tTWU1CT0xfUkFXX0RBVEFdLnR5cGU7XG5cblx0XHRyZXR1cm4gJ1JhdycgKyB0aGlzLmdldFR5cGVvZigpLnJlcGxhY2UoL15bYS16XS8sIGZ1bmN0aW9uIChzKVxuXHRcdHtcblx0XHRcdHJldHVybiBzLnRvVXBwZXJDYXNlKCk7XG5cdFx0fSkgKyBgKCR7aW5zcGVjdCh0aGlzLmdldFJhd1ZhbHVlKCkpfSR7cGFkID8gJywgJyArIHBhZCA6ICcnfSlgXG5cdH1cblxuXHR0b0pTT04oKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcblx0fVxuXG5cdHRvU3RyaW5nKClcblx0e1xuXHRcdHJldHVybiB0aGlzW1NZTUJPTF9SQVdfVkFMVUVdLnRvU3RyaW5nKCk7XG5cdH1cblxuXHRnZXRUeXBlb2YoKVxuXHR7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkodGhpc1tTWU1CT0xfUkFXX1ZBTFVFXSkgPyAnYXJyYXknIDogdHlwZW9mIHRoaXNbU1lNQk9MX1JBV19WQUxVRV07XG5cdH1cblxuXHRnZXRSYXdEYXRhKCk6IFJEXG5cdHtcblx0XHRyZXR1cm4gdGhpc1tTWU1CT0xfUkFXX0RBVEFdO1xuXHR9XG5cblx0Z2V0UmF3VmFsdWUoKTogUlZcblx0e1xuXHRcdHJldHVybiB0aGlzW1NZTUJPTF9SQVdfVkFMVUVdO1xuXHR9XG5cblx0c3RhdGljIGlzUmF3T2JqZWN0PFQgZXh0ZW5kcyBSYXdPYmplY3Q8YW55LCBhbnk+Pih2OiBhbnkgfCBUKTogdiBpcyBFeHRyYWN0PFQsIFJhd09iamVjdDxhbnksIGFueT4+XG5cdHN0YXRpYyBpc1Jhd09iamVjdDxUIGV4dGVuZHMgUmF3T2JqZWN0PHVua25vd24sIElSYXdPYmplY3REYXRhPj4odjogYW55KTogdiBpcyBUXG5cdHN0YXRpYyBpc1Jhd09iamVjdDxUIGV4dGVuZHMgUmF3T2JqZWN0PHVua25vd24sIElSYXdPYmplY3REYXRhPj4odjogYW55KTogdiBpcyBUXG5cdHtcblx0XHRyZXR1cm4gKHYgaW5zdGFuY2VvZiBSYXdPYmplY3QpO1xuXHR9XG5cblx0LyoqXG5cdCAqIHdpbGwgcmVtb3ZlIGhpZGRlbiBkYXRhIGFuZCBnZXQgc291cmNlIGRhdGFcblx0ICpcblx0ICogQHBhcmFtIHtSYXdPYmplY3R9IGRhdGFcblx0ICovXG5cdHN0YXRpYyByZW1vdmVSYXdEYXRhPFQ+KGRhdGE6IFJhd09iamVjdDxULCBhbnk+KTogVFxuXHRzdGF0aWMgcmVtb3ZlUmF3RGF0YTxUPihkYXRhOiBUKTogVFxuXHRzdGF0aWMgcmVtb3ZlUmF3RGF0YShkYXRhKVxuXHR7XG5cdFx0aWYgKHRoaXMuaXNSYXdPYmplY3QoZGF0YSkpXG5cdFx0e1xuXHRcdFx0ZGF0YSA9IGRhdGEuZ2V0UmF3VmFsdWUoKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIGRhdGEgPT0gJ29iamVjdCcpXG5cdFx0e1xuXHRcdFx0Zm9yIChsZXQgaSBpbiBkYXRhKVxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhW2ldID0gdGhpcy5yZW1vdmVSYXdEYXRhKGRhdGFbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmF3T2JqZWN0O1xuIl19