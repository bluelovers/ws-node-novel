{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":";;AAoIA,IAAkB,MAMjB;AAND,WAAkB,MAAM;IAEvB,oBAAU,CAAA;IACV,sBAAY,CAAA;IACZ,wBAAc,CAAA;IACd,0BAAgB,CAAA;AACjB,CAAC,EANiB,MAAM,GAAN,cAAM,KAAN,cAAM,QAMvB","sourcesContent":["\nexport interface IConstructorOptions extends ITextLayoutHiddenData\n{\n\twords_block?: string[],\n\n\t/**\n\t * 一般來說不需要改動\n\t * @type {string}\n\t */\n\tSP_KEY?: string,\n\t/**\n\t * 可以替換成符合需求的 regexp 樣式\n\t * 請注意不要在樣式內用任何括號回傳的語法以及請用 `(?:xxxx)` 將 語法包起來\n\t *\n\t * @type {string}\n\t */\n\tSP_REGEXP?: string | RegExp,\n\n\t/**\n\t * 使用自訂的 RegExp Class\n\t */\n\tRegExpClass?: typeof RegExp,\n}\n\nexport interface ITextLayoutHiddenData\n{\n\tm0?: RegExp;\n\tr1?: RegExp;\n\trtrim?: RegExp,\n\twords?: IWordsRuntime[],\n}\n\nexport interface IToStrOptions\n{\n\tLF?: string,\n\tallow_nbsp?: boolean,\n\tallow_bom?: boolean,\n}\n\nexport interface ITrimOptions extends IToStrOptions\n{\n\ttrim?: boolean | string\n}\n\nexport interface ITextLayoutOptions extends ITrimOptions\n{\n\tallow_lf2?: boolean,\n\tallow_lf3?: boolean,\n}\n\nexport type IWordsRuntime = IWordsParsed | IWordsFunction;\nexport type IWordsAll = IWordsArray | IWordsArray2 | IWordsUser | IWordsUserSP;\n\n/**\n * 推薦使用此格式 簡單方便\n */\nexport type IWordsArray = [string | RegExp, string | IRegExpCallback, string?, ...unknown[]];\n\n/**\n * 接收目前文字內容並輸出新文字內容\n */\nexport interface IWordsFunction\n{\n\t/**\n\t * 接收目前文字內容並輸出新文字內容\n\t */\n\t(_ret: string, _cache_words: ICacheMap): string;\n}\n\nexport interface IWordsArray2\n{\n\t[0]: IWordsFunction,\n\tlength: 1\n}\n\nexport interface IWordsOutputCore\n{\n\t_source?: IWordsAll | IWordsRuntime | string,\n\n\tr: string | IRegExpCallback,\n\n\tflags?: string,\n\n\t/**\n\t * 接收目前文字內容並輸出新文字內容\n\t */\n\tfn?: IWordsFunction,\n\n\t/**\n\t * 不處理物件直接回傳原始物件\n\t */\n\tno_regex?: boolean,\n}\n\nexport interface IWordsParsed extends IWordsOutputCore\n{\n\ts: RegExp,\n}\n\nexport interface IWordsUser extends IWordsOutputCore\n{\n\ts?: string | RegExp,\n}\n\n/**\n * 當 s 為 string 並且 包含 SP_KEY\n */\nexport interface IWordsUserSP extends IWordsOutputCore\n{\n\t/**\n\t * s 為 string 並且 包含 SP_KEY\n\t */\n\ts: string,\n}\n\nexport interface IRegExpCallback\n{\n\t($0: string, $1?: string, $2?: string, $3?: string, ...argv: string[]): string;\n\n\t(substring: string, ...args: any[]): string\n}\n\nexport type ICacheMap = Map<IWordsRuntime, ICacheMapRow[]>;\n\nexport interface ICacheMapRow\n{\n\told: string,\n\tnew: string,\n}\n\nexport type ITrimOptionsUser = ITrimOptions | ITrimOptions[\"trim\"]\n\nexport const enum EnumLF\n{\n\tLF1 = '\\n',\n\tLF2 = '\\n\\n',\n\tLF3 = '\\n\\n\\n',\n\tLF4 = '\\n\\n\\n\\n',\n}\n\nexport interface IReplaceOptions\n{\n\twords?: boolean\n\tpad_eng?: boolean\n}\n"]}