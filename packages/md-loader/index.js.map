{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAEH,0CAA2C;AAC3C,qDAA6F;AA4B7F,SAAgB,KAAK,CAAmC,YAAe,EAAE,OAAkC;IAE1G,IAAI,EAAE,aAAa,EAAE,YAAY,EAAE,MAAM,GAAG,8BAAY,EAAE,GAAG,CAAC,OAAO,IAAI,EAAU,CAAC,CAAC;IAGrF,IAAI,UAAU,GAAG,OAAO,CAAC,SAAS,IAAI,2BAAgB,CAAC;IAEvD,IAAI,YAAY,IAAI,IAAI,IAAI,OAAO,SAAS,KAAK,UAAU,IAAI,OAAO,MAAM,KAAK,UAAU,EAC3F;QACC,IAAI,CAAC,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;QAE1B,aAAa;QACb,CAAC,CAAC,YAAY,GAAG,YAAY,CAAC;QAC9B,aAAa;QACb,CAAC,CAAC,QAAQ,GAAG,OAAO,CAAC;QAErB,MAAM,CAAC,CAAA;KACP;IAED,aAAa;IACb,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;IAExC,IAAI,MAAM,GAAG,UAAU,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IACrD,aAAa;IACb,IAAI,MAAM,GAAG,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAEhD,IAAI,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,CAAC,EACxD;QACC,MAAM,GAAG,IAAI,CAAC;KACd;IAED,OAAO;QACN;;WAEG;QACH,MAAM;QACN;;WAEG;QACH,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB;;WAEG;QACH,IAAI,EAAE,MAAM,CAAC,IAAkB;QAC/B;;;WAGG;QACH,MAAM;QACN;;;WAGG;QACH,SAAS,CAAmB,SAAiC;YAE5D,OAAO,SAAS,CAAS,SAAS,EAAE;gBACnC,aAAa;gBACb,SAAS,EAAE,UAAU;aACrB,CAAC,CAAA;QACH,CAAC;KACD,CAAA;AACF,CAAC;AA7DD,sBA6DC;AAED;;;GAGG;AACH,SAAgB,SAAS,CAAS,SAAiC,EAAE,OAGnE;IAED,IAAI,EAAE,aAAa,EAAE,SAAS,GAAG,2BAAgB,EAAE,GAAG,CAAC,OAAO,IAAI,EAAU,CAAC,CAAC;IAE9E,aAAa;IACb,IAAI,OAAO,GAAW,SAAS,CAAC,OAAO,IAAI,IAAI;QAC9C,aAAa;QACb,CAAC,CAAC,SAAS,CAAC,OAAO;QACnB,aAAa;QACb,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CACvD;IAED,OAAO,UAAU,CAAC,SAAS,CAC1B,UAAU,CAAC,OAAO,CAAC;IACnB,aAAa;IACb,SAAS,CAAC,IAAI;IACd,aAAa;IACb,aAAa,CACb,CAAA;AACF,CAAC;AAtBD,8BAsBC;AAED;;GAEG;AACH,SAAgB,UAAU,CAAmB,YAAe;IAE3D,IAAI,YAAY,IAAI,IAAI,EACxB;QACC,aAAa;QACb,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;aACjC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CACxB;QAED,aAAa;QACb,OAAO,YAAY,CAAC;KACpB;AACF,CAAC;AAZD,gCAYC;AAqBD,kBAAe,OAAmC,CAAC","sourcesContent":["/**\n * Created by user on 2019/2/1/001.\n */\n\nimport GrayMatter = require('gray-matter');\nimport { IOptionsParse, mdconf_parse, stringify as mdconf_stringify } from 'node-novel-info';\n\nexport interface IOptions<I extends IInput, OUT extends any, PO, GO>\n{\n\t/**\n\t * 傳給 gray-matter 的 options\n\t * @see https://www.npmjs.com/package/gray-matter\n\t */\n\tmatterOptions?: GrayMatter.GrayMatterOption<I, GO>,\n\n\t/**\n\t * 自訂 mdconf 的解析函數\n\t * 預設狀況下為 node-novel-info\n\t */\n\tparser?(input: I, parseOptions?: IParseOptions<PO>): IObject<OUT>,\n\t/**\n\t * 傳給 parser 的 options\n\t * 預設狀況下為 node-novel-info 的 IOptionsParse\n\t */\n\tparseOptions?: IParseOptions<PO>,\n\n\t/**\n\t * 用來將 mdconf 轉換回 md 的函數\n\t * 預設狀況下為 node-novel-info\n\t */\n\tstringify?(input): string,\n}\n\nexport function parse<I extends IInput, D, OUT, PO, GO>(inputContent: I, options?: IOptions<I, OUT, PO, GO>)\n{\n\tlet { matterOptions, parseOptions, parser = mdconf_parse } = (options || {} as null);\n\n\n\tlet _stringify = options.stringify || mdconf_stringify;\n\n\tif (inputContent == null || typeof stringify !== 'function' || typeof parser !== 'function')\n\t{\n\t\tlet e = new TypeError(``);\n\n\t\t// @ts-ignore\n\t\te.inputContent = inputContent;\n\t\t// @ts-ignore\n\t\te._options = options;\n\n\t\tthrow e\n\t}\n\n\t// @ts-ignore\n\tinputContent = fixContent(inputContent);\n\n\tlet matter = GrayMatter(inputContent, matterOptions);\n\t// @ts-ignore\n\tlet mdconf = parser(inputContent, parseOptions);\n\n\tif (!mdconf || mdconf && Object.keys(mdconf).length == 0)\n\t{\n\t\tmdconf = null;\n\t}\n\n\treturn {\n\t\t/**\n\t\t * 經由 gray-matter 解析後的物件\n\t\t */\n\t\tmatter,\n\t\t/**\n\t\t * 排除 Front Matter 後的原始內容\n\t\t */\n\t\tcontent: matter.content,\n\t\t/**\n\t\t * Front Matter 資料\n\t\t */\n\t\tdata: matter.data as IObject<D>,\n\t\t/**\n\t\t * 回傳的 mdconf 資料 預設為 node-novel-info\n\t\t * 如果回傳的 為 {} 空物件則會被轉換為 null\n\t\t */\n\t\tmdconf,\n\t\t/**\n\t\t * 用來將取得的物件轉換回 md\n\t\t * 當 content, mdconf 同時存在時 content > mdconf\n\t\t */\n\t\tstringify<T1 = D, T2 = OUT>(inputData: IStringifyData<T1, T2>): string\n\t\t{\n\t\t\treturn stringify<T1, T2>(inputData, {\n\t\t\t\tmatterOptions,\n\t\t\t\tstringify: _stringify,\n\t\t\t})\n\t\t},\n\t}\n}\n\n/**\n * 用來將取得的物件轉換回 md\n * 當 content, mdconf 同時存在時 content > mdconf\n */\nexport function stringify<T1, T2>(inputData: IStringifyData<T1, T2>, options?: IObject<{\n\tmatterOptions?: GrayMatter.GrayMatterOption<IInput, any>,\n\tstringify?(input): string,\n}>)\n{\n\tlet { matterOptions, stringify = mdconf_stringify } = (options || {} as null);\n\n\t// @ts-ignore\n\tlet content: string = inputData.content != null\n\t\t// @ts-ignore\n\t\t? inputData.content\n\t\t// @ts-ignore\n\t\t: inputData.mdconf ? stringify(inputData.mdconf) : null\n\t;\n\n\treturn GrayMatter.stringify(\n\t\tfixContent(content),\n\t\t// @ts-ignore\n\t\tinputData.data,\n\t\t// @ts-ignore\n\t\tmatterOptions,\n\t)\n}\n\n/**\n * 將 inputContent 轉為 string\n */\nexport function fixContent<I extends IInput>(inputContent: I): string\n{\n\tif (inputContent != null)\n\t{\n\t\t// @ts-ignore\n\t\tinputContent = String(inputContent)\n\t\t\t.replace(/^[\\r\\n]+/, '')\n\t\t;\n\n\t\t// @ts-ignore\n\t\treturn inputContent;\n\t}\n}\n\n/**\n * 最後處理時 都會被轉為 string\n */\nexport type IInput = Buffer | string;\nexport type IParseOptions<PO> = (IOptionsParse | object) | PO;\n\n/**\n * 當 content, mdconf 同時存在時 content > mdconf\n */\nexport type IStringifyData<T extends any, OUT extends any> = IObject<{\n\tdata?: IObject<T>,\n} & ({ content: IInput; } | { mdconf: OUT, })>;\n\nexport type IObject<T extends any, B extends {\n\t[key: string]: any\n} = {\n\t[key: string]: any\n}> = B & T\n\nexport default exports as typeof import('./index');\n"]}